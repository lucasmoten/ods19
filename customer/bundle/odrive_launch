#!/bin/bash

if [ "X$AWS_ACCESS_KEY_ID" == "X" ]
then
  echo AWS_ACCESS_KEY_ID must be set to an aws access key id like AKIAJIO...
fi
if [ "X$AWS_SECRET_ACCESS_KEY" == "X" ]
then
  echo AWS_SECRET_ACCESS_KEY must be set to an aws access key id like 5zubRh...
fi
if [ "X$AWS_REGION" = "X" ]
then
  echo AWS_REGION must be set to a valid region like us-east-1
fi
if [ "X$AWS_VPC" = "X" ]
then
  echo AWS_VPC must be set to a valid vpc like vpc-01fbb464
fi
if [ "X$AWS_ZONE" = "X" ]
then
  echo AWS_ZONE must be set to a valid aws zone like d
fi
if [ "X$AWS_S3_BUCKET" == "X" ]
then
  echo AWS_S3_BUCKET  mst be set to a valid bucket name like decipherers
fi

export OD_AWS_REGION=$AWS_REGION

export OD_AWS_VPC=$AWS_VPC
export OD_AWS_ZONE=$AWS_ZONE
export OD_AWS_S3_BUCKET=$AWS_S3_BUCKET

export OD_ZK_TIMEOUT=10
export GOROOT=~/go1.8.1/go
#export GOROOT=~/go1.8src/go
export GOPATH=~/gocode
export OD_ROOT=~/javacode
export OD_DB_MAXIDLECONNS=5
export OD_DB_MAXOPENCONNS=5
export OD_ENCRYPT_MASTERKEY=otterpaws
export OD_ZK_ANNOUNCE=/cte/service/object-drive/1.0
export OD_AAC_CN=twl-server-generic2

export OD_AAC_HOST=
export OD_DB_PASSWORD=dbPassword
export OD_DB_USERNAME=dbuser
export OD_DB_HOST=metadatadb
export OD_DB_CA=/go/src/decipher.com/object-drive-server/defaultcerts/client-mysql/trust/ca.pem
export OD_DB_CERT=/go/src/decipher.com/object-drive-server/defaultcerts/client-mysql/id/client-cert.pem
export OD_DB_KEY=/go/src/decipher.com/object-drive-server/defaultcerts/client-mysql/id/client-key.pem
export OD_DB_PORT=3306
export OD_DB_SCHEMA=metadatadb
export OD_DB_CONN_PARAMS='parseTime=true&collation=utf8_unicode_ci&readTimeout=30s'
export OD_SERVER_PORT=4430


export OD_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
export OD_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
export OD_AWS_VPC=$AWS_VPC
export OD_AWS_ZONE=$AWS_ZONE
export OD_AWS_S3_BUCKET=$AWS_S3_BUCKET
export OD_AWS_S3_ENDPOINT=$AWS_S3_ENDPOINT
export OD_AWS_REGION=$AWS_REGION

export OD_CACHE_PARTITION=customer/test

export OD_SERVER_CA=
export OD_SERVER_CERT=
export OD_SERVER_KEY=

export OD_EVENT_KAFKA_ADDRS=kafka:9092
export OD_EVENT_ZK_ADDRS=zk:2181

export OD_AWS_CLOUDWATCH_NAME=
export OD_AWS_CLOUDWATCH_ENDPOINT=
export OD_AWS_SQS_NAME=
export OD_AWS_SQS_INTERVAL=5
export OD_AWS_SQS_ENDPOINT=
export OD_AWS_ASG_NAME=
export OD_AWS_ASG_ENDPOINT=
export OD_AWS_ASG_EC2=

export OD_EXTERNAL_HOST=

export OD_CACHE_LOWWATERMARK=0.05
export OD_CACHE_HIGHWATERMARK=0.12
export OD_CACHE_EVICTAGE=10
export OD_CACHE_WALKSLEEP=15

export NODE_ENV=prod
export OD_AAC_ZK_ADDRS=pk:2181

DCOMPOSE="docker-compose -f docker-compose-for-customers.yml"

alias dc="$DCOMPOSE"
restart()
{
  $DCOMPOSE stop
  $DCOMPOSE rm -f
  $DCOMPOSE up -d zk
  sleep 10
  $DCOMPOSE up -d kafka
  sleep 20
  $DCOMPOSE up -d odrive
  sleep 30
  $DCOMPOSE up -d proxier
  sleep 10
  $DCOMPOSE up -d odrive-indexer

  # Fetch the latest UI from S3 and install it into proxier

  UITARFILE=ui-2017-09-26.tar
  rm ui-*.tar
  rm ui.tar
  wget https://s3.amazonaws.com/decipherers/$UITARFILE

  (
    mkdir ui
    cd ui
    tar xf ../$UITARFILE
    cp ../settings.json opt/apps/drive/json/settings.json 
    cp ../chm_drive.json opt/apps/drive/json/chm_drive.json
    cp ../piwik.js opt/apps/drive/json/piwik.js
    cp ../piwik.php opt/apps/drive/json/piwik.php
    tar -cf ../$UITARFILE *
  )

  docker cp $UITARFILE docker_proxier_1:ui.tar
  docker exec docker_proxier_1 tar xf /ui.tar
  docker exec docker_proxier_1 chown -R nginx:nginx /opt/apps
  rm -rf ui
  rm ui-*.tar
}

action=$1
if [ "X`command -v docker-machine`" == "X" ]
then
  connecttoprefix=https://localhost:8080/apps/drive/index.html
else
  dmip=$(docker-machine ip)
  if [ "X$dmip" == "X" ]
  then
    connecttoprefix=https://localhost:8080/apps/drive/index.html
    else
      connecttoprefix=https://$(docker-machine ip):8080/apps/drive/index.html
  fi
fi
connectto=$connecttoprefix/apps/drive/index.html
connecttodocs=$connecttoprefix/services/object-drive/1.0
echo setup for odrive on $connectto
(
  cd docker
  if [ "X$action" == "Xclean" ]
  then
    echo cleaning
    $DCOMPOSE stop
    $DCOMPOSE rm -f
  else
    if [ "X$action" == "Xstop" ]
    then
      echo stopping
      $DCOMPOSE stop
    else
      if [ "X$action" == "Xstart" ]
      then
        echo starting
        $DCOMPOSE up -d
        echo docs at $connecttodocs
        echo connect at $connectto
      else
        if [ "X$action" == "Xup" ]
        then
          echo "clean up and restart"
          restart
          echo docs at $connecttodocs
          echo connect at $connectto
        else
          echo "environment is set"
          echo "  options:"
          echo "    up - completely clean bring-up of odrive (recommended)"
          echo "    start - start previously stopped instance"
          echo "    stop - stop previously stopped instance"
          echo "    clean - remove existing instance of odrive"
        fi
      fi
    fi
  fi
)
