// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package aac

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AacService interface {
	// Builds an ACM object from a byte string. Used by message traffic ingestion
	//
	// @param byteList. Data to be converted to ACM
	// @param dataTye. Data type. Supported types: XML
	// @param propertiesMap. Optional properties used to build ACM
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - ByteList
	//  - DataType
	//  - PropertiesMap
	BuildAcm(byteList []int8, dataType string, propertiesMap map[string]string) (r *AcmResponse, err error)
	// Validates ACM list, will optionally do rollup and populate.
	//
	// @param acm. JSON representation of the ACM
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - AcmInfoList
	//  - UserToken
	//  - TokenType
	//  - ShareType
	//  - Share
	//  - Rollup
	//  - Populate
	ValidateAcms(acmInfoList []*AcmInfo, userToken string, tokenType string, shareType string, share string, rollup bool, populate bool) (r *ValidateAcmsResponse, err error)
	// Validates ACM
	//
	// @param acm. JSON representation of the ACM
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - Acm
	ValidateAcm(acm string) (r *AcmResponse, err error)
	// Auto populates normalized ACM fields and validates ACM
	//
	// @param acm. JSON representation of the ACM
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - Acm
	PopulateAndValidateAcm(acm string) (r *AcmResponse, err error)
	// Creates an ACM object from a capco string, normalizes and validates the ACM
	//
	// @param capcoString.  cacpo string
	//  @param capcoStringTypes.  corresponds to CapcoStringType enum ("TITLE","ABBREVIATION","PORTIONMARKING","ISM")
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - CapcoString
	//  - CapcoStringTypes
	PopulateAndValidateAcmFromCapcoString(capcoString string, capcoStringTypes string) (r *AcmResponse, err error)
	// Detemines whether a country trigraph is valid
	//
	// @param trigraph.  string representing the country trigraph to be checked
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - Trigraph
	IsCountryTrigraph(trigraph string) (r *ValidateTrigraphResponse, err error)
	//    *  Creates an ACM object from a banner marking.
	//    *
	//    *  @param banner. Banner marking
	// *  @param shareType. share type, valid values - public, private, other
	// *	@param share. Share object if share type is other
	//    *
	//    *  @throws InvalidInputException
	//    *	@throws SecurityServiceException
	//
	// Parameters:
	//  - Banner
	//  - ShareType
	//  - Share
	CreateAcmFromBannerMarking(banner string, shareType string, share string) (r *AcmResponse, err error)
	// Rolls up ACMs and populates normalized values in rolled up ACM
	//
	//  @param userToken. User token, required if share type is public
	// @param acmList. List of ACMs in JSON format
	//  @param shareType. share type, valid values - public, private, other
	// @param share. Share object if share type is other
	//
	// @throws InvalidInputException
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - AcmList
	//  - ShareType
	//  - Share
	RollupAcms(userToken string, acmList []string, shareType string, share string) (r *AcmResponse, err error)
	// *	Checks if the user attributes have access to ACM
	// *
	//    *  @param userToken. User token
	//    *  @param tokenType. Type of user token
	// *	@param acm. JSON representation of the ACM
	// *
	// *	@throws InvalidInputException
	// *	@throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - TokenType
	//  - Acm
	CheckAccess(userToken string, tokenType string, acm string) (r *CheckAccessResponse, err error)
	// For each ACM object in the list, checks to see if user has access to it. If user has access, it validates
	// and populates ACM.
	//
	// @param userToken. User token
	// @param tokenType. Type of user token
	// @param acmInfoList. List of ACMs optionally identified with paths
	// @param calculateRollup. If true, a rollup of all ACMs will be performed and returned in the response
	// @param shareType. Share type of the rolled up. Supported types are public, private, and other.
	// @param share. Share object if share type is other.
	//
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - TokenType
	//  - AcmInfoList
	//  - CalculateRollup
	//  - ShareType
	//  - Share
	CheckAccessAndPopulate(userToken string, tokenType string, acmInfoList []*AcmInfo, calculateRollup bool, shareType string, share string) (r *CheckAccessAndPopulateResponse, err error)
	// Retrieves a user's attributes
	//
	// @param userToken. User token
	// @param tokenType. Type of user token
	// @param snippetType. If specified, snippets of the specified type are returned. Supported types are Mongo and ES
	//
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - TokenType
	//  - SnippetType
	GetUserAttributes(userToken string, tokenType string, snippetType string) (r *UserAttributesResponse, err error)
	// Clears user attributes from cache
	//
	//  @param userToken. User token
	//  @param tokenType. Type of user token
	//
	//  @throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - TokenType
	ClearUserAttributesFromCache(userToken string, tokenType string) (r *ClearUserAttributesResponse, err error)
	// Generates snippets of a given type based on the user's attributes
	//
	// @param userToken. User token
	// @param tokenType. Type of user token
	// @param type. Snippet type. Supported types are Mongo and ES.
	//
	// @throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - TokenType
	//  - SnippetType
	GetSnippets(userToken string, tokenType string, snippetType string) (r *SnippetResponse, err error)
	// Generates a share object for a given type.
	//
	//  @param userToken. User token
	//  @param tokenType. Type of user token
	//  @param shareType. Share type. Supported types are public, private, and other.
	//  @param share. Share object if share type is other.
	//
	//  @throws SecurityServiceException
	//
	// Parameters:
	//  - UserToken
	//  - TokenType
	//  - ShareType
	//  - Share
	GetShare(userToken string, tokenType string, shareType string, share string) (r *ShareResponse, err error)
}

type AacServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAacServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AacServiceClient {
	return &AacServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAacServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AacServiceClient {
	return &AacServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Builds an ACM object from a byte string. Used by message traffic ingestion
//
// @param byteList. Data to be converted to ACM
// @param dataTye. Data type. Supported types: XML
// @param propertiesMap. Optional properties used to build ACM
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - ByteList
//  - DataType
//  - PropertiesMap
func (p *AacServiceClient) BuildAcm(byteList []int8, dataType string, propertiesMap map[string]string) (r *AcmResponse, err error) {
	if err = p.sendBuildAcm(byteList, dataType, propertiesMap); err != nil {
		return
	}
	return p.recvBuildAcm()
}

func (p *AacServiceClient) sendBuildAcm(byteList []int8, dataType string, propertiesMap map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("buildAcm", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceBuildAcmArgs{
		ByteList:      byteList,
		DataType:      dataType,
		PropertiesMap: propertiesMap,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvBuildAcm() (value *AcmResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "buildAcm" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "buildAcm failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "buildAcm failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "buildAcm failed: invalid message type")
		return
	}
	result := AacServiceBuildAcmResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// Validates ACM list, will optionally do rollup and populate.
//
// @param acm. JSON representation of the ACM
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - AcmInfoList
//  - UserToken
//  - TokenType
//  - ShareType
//  - Share
//  - Rollup
//  - Populate
func (p *AacServiceClient) ValidateAcms(acmInfoList []*AcmInfo, userToken string, tokenType string, shareType string, share string, rollup bool, populate bool) (r *ValidateAcmsResponse, err error) {
	if err = p.sendValidateAcms(acmInfoList, userToken, tokenType, shareType, share, rollup, populate); err != nil {
		return
	}
	return p.recvValidateAcms()
}

func (p *AacServiceClient) sendValidateAcms(acmInfoList []*AcmInfo, userToken string, tokenType string, shareType string, share string, rollup bool, populate bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("validateAcms", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceValidateAcmsArgs{
		AcmInfoList: acmInfoList,
		UserToken:   userToken,
		TokenType:   tokenType,
		ShareType:   shareType,
		Share:       share,
		Rollup:      rollup,
		Populate:    populate,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvValidateAcms() (value *ValidateAcmsResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "validateAcms" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "validateAcms failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "validateAcms failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "validateAcms failed: invalid message type")
		return
	}
	result := AacServiceValidateAcmsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// Validates ACM
//
// @param acm. JSON representation of the ACM
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - Acm
func (p *AacServiceClient) ValidateAcm(acm string) (r *AcmResponse, err error) {
	if err = p.sendValidateAcm(acm); err != nil {
		return
	}
	return p.recvValidateAcm()
}

func (p *AacServiceClient) sendValidateAcm(acm string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("validateAcm", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceValidateAcmArgs{
		Acm: acm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvValidateAcm() (value *AcmResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "validateAcm" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "validateAcm failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "validateAcm failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "validateAcm failed: invalid message type")
		return
	}
	result := AacServiceValidateAcmResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// Auto populates normalized ACM fields and validates ACM
//
// @param acm. JSON representation of the ACM
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - Acm
func (p *AacServiceClient) PopulateAndValidateAcm(acm string) (r *AcmResponse, err error) {
	if err = p.sendPopulateAndValidateAcm(acm); err != nil {
		return
	}
	return p.recvPopulateAndValidateAcm()
}

func (p *AacServiceClient) sendPopulateAndValidateAcm(acm string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("populateAndValidateAcm", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServicePopulateAndValidateAcmArgs{
		Acm: acm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvPopulateAndValidateAcm() (value *AcmResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "populateAndValidateAcm" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "populateAndValidateAcm failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "populateAndValidateAcm failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "populateAndValidateAcm failed: invalid message type")
		return
	}
	result := AacServicePopulateAndValidateAcmResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// Creates an ACM object from a capco string, normalizes and validates the ACM
//
// @param capcoString.  cacpo string
//  @param capcoStringTypes.  corresponds to CapcoStringType enum ("TITLE","ABBREVIATION","PORTIONMARKING","ISM")
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - CapcoString
//  - CapcoStringTypes
func (p *AacServiceClient) PopulateAndValidateAcmFromCapcoString(capcoString string, capcoStringTypes string) (r *AcmResponse, err error) {
	if err = p.sendPopulateAndValidateAcmFromCapcoString(capcoString, capcoStringTypes); err != nil {
		return
	}
	return p.recvPopulateAndValidateAcmFromCapcoString()
}

func (p *AacServiceClient) sendPopulateAndValidateAcmFromCapcoString(capcoString string, capcoStringTypes string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("populateAndValidateAcmFromCapcoString", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServicePopulateAndValidateAcmFromCapcoStringArgs{
		CapcoString:      capcoString,
		CapcoStringTypes: capcoStringTypes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvPopulateAndValidateAcmFromCapcoString() (value *AcmResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "populateAndValidateAcmFromCapcoString" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "populateAndValidateAcmFromCapcoString failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "populateAndValidateAcmFromCapcoString failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "populateAndValidateAcmFromCapcoString failed: invalid message type")
		return
	}
	result := AacServicePopulateAndValidateAcmFromCapcoStringResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// Detemines whether a country trigraph is valid
//
// @param trigraph.  string representing the country trigraph to be checked
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - Trigraph
func (p *AacServiceClient) IsCountryTrigraph(trigraph string) (r *ValidateTrigraphResponse, err error) {
	if err = p.sendIsCountryTrigraph(trigraph); err != nil {
		return
	}
	return p.recvIsCountryTrigraph()
}

func (p *AacServiceClient) sendIsCountryTrigraph(trigraph string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("isCountryTrigraph", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceIsCountryTrigraphArgs{
		Trigraph: trigraph,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvIsCountryTrigraph() (value *ValidateTrigraphResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "isCountryTrigraph" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "isCountryTrigraph failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "isCountryTrigraph failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "isCountryTrigraph failed: invalid message type")
		return
	}
	result := AacServiceIsCountryTrigraphResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

//    *  Creates an ACM object from a banner marking.
//    *
//    *  @param banner. Banner marking
// *  @param shareType. share type, valid values - public, private, other
// *	@param share. Share object if share type is other
//    *
//    *  @throws InvalidInputException
//    *	@throws SecurityServiceException
//
// Parameters:
//  - Banner
//  - ShareType
//  - Share
func (p *AacServiceClient) CreateAcmFromBannerMarking(banner string, shareType string, share string) (r *AcmResponse, err error) {
	if err = p.sendCreateAcmFromBannerMarking(banner, shareType, share); err != nil {
		return
	}
	return p.recvCreateAcmFromBannerMarking()
}

func (p *AacServiceClient) sendCreateAcmFromBannerMarking(banner string, shareType string, share string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createAcmFromBannerMarking", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceCreateAcmFromBannerMarkingArgs{
		Banner:    banner,
		ShareType: shareType,
		Share:     share,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvCreateAcmFromBannerMarking() (value *AcmResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createAcmFromBannerMarking" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createAcmFromBannerMarking failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createAcmFromBannerMarking failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createAcmFromBannerMarking failed: invalid message type")
		return
	}
	result := AacServiceCreateAcmFromBannerMarkingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// Rolls up ACMs and populates normalized values in rolled up ACM
//
//  @param userToken. User token, required if share type is public
// @param acmList. List of ACMs in JSON format
//  @param shareType. share type, valid values - public, private, other
// @param share. Share object if share type is other
//
// @throws InvalidInputException
// @throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - AcmList
//  - ShareType
//  - Share
func (p *AacServiceClient) RollupAcms(userToken string, acmList []string, shareType string, share string) (r *AcmResponse, err error) {
	if err = p.sendRollupAcms(userToken, acmList, shareType, share); err != nil {
		return
	}
	return p.recvRollupAcms()
}

func (p *AacServiceClient) sendRollupAcms(userToken string, acmList []string, shareType string, share string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rollupAcms", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceRollupAcmsArgs{
		UserToken: userToken,
		AcmList:   acmList,
		ShareType: shareType,
		Share:     share,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvRollupAcms() (value *AcmResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rollupAcms" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rollupAcms failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rollupAcms failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rollupAcms failed: invalid message type")
		return
	}
	result := AacServiceRollupAcmsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// *	Checks if the user attributes have access to ACM
// *
//    *  @param userToken. User token
//    *  @param tokenType. Type of user token
// *	@param acm. JSON representation of the ACM
// *
// *	@throws InvalidInputException
// *	@throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - TokenType
//  - Acm
func (p *AacServiceClient) CheckAccess(userToken string, tokenType string, acm string) (r *CheckAccessResponse, err error) {
	if err = p.sendCheckAccess(userToken, tokenType, acm); err != nil {
		return
	}
	return p.recvCheckAccess()
}

func (p *AacServiceClient) sendCheckAccess(userToken string, tokenType string, acm string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkAccess", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceCheckAccessArgs{
		UserToken: userToken,
		TokenType: tokenType,
		Acm:       acm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvCheckAccess() (value *CheckAccessResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkAccess" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkAccess failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkAccess failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkAccess failed: invalid message type")
		return
	}
	result := AacServiceCheckAccessResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	} else if result.Ex2 != nil {
		err = result.Ex2
		return
	}
	value = result.GetSuccess()
	return
}

// For each ACM object in the list, checks to see if user has access to it. If user has access, it validates
// and populates ACM.
//
// @param userToken. User token
// @param tokenType. Type of user token
// @param acmInfoList. List of ACMs optionally identified with paths
// @param calculateRollup. If true, a rollup of all ACMs will be performed and returned in the response
// @param shareType. Share type of the rolled up. Supported types are public, private, and other.
// @param share. Share object if share type is other.
//
// @throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - TokenType
//  - AcmInfoList
//  - CalculateRollup
//  - ShareType
//  - Share
func (p *AacServiceClient) CheckAccessAndPopulate(userToken string, tokenType string, acmInfoList []*AcmInfo, calculateRollup bool, shareType string, share string) (r *CheckAccessAndPopulateResponse, err error) {
	if err = p.sendCheckAccessAndPopulate(userToken, tokenType, acmInfoList, calculateRollup, shareType, share); err != nil {
		return
	}
	return p.recvCheckAccessAndPopulate()
}

func (p *AacServiceClient) sendCheckAccessAndPopulate(userToken string, tokenType string, acmInfoList []*AcmInfo, calculateRollup bool, shareType string, share string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkAccessAndPopulate", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceCheckAccessAndPopulateArgs{
		UserToken:       userToken,
		TokenType:       tokenType,
		AcmInfoList:     acmInfoList,
		CalculateRollup: calculateRollup,
		ShareType:       shareType,
		Share:           share,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvCheckAccessAndPopulate() (value *CheckAccessAndPopulateResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkAccessAndPopulate" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkAccessAndPopulate failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkAccessAndPopulate failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkAccessAndPopulate failed: invalid message type")
		return
	}
	result := AacServiceCheckAccessAndPopulateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	}
	value = result.GetSuccess()
	return
}

// Retrieves a user's attributes
//
// @param userToken. User token
// @param tokenType. Type of user token
// @param snippetType. If specified, snippets of the specified type are returned. Supported types are Mongo and ES
//
// @throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - TokenType
//  - SnippetType
func (p *AacServiceClient) GetUserAttributes(userToken string, tokenType string, snippetType string) (r *UserAttributesResponse, err error) {
	if err = p.sendGetUserAttributes(userToken, tokenType, snippetType); err != nil {
		return
	}
	return p.recvGetUserAttributes()
}

func (p *AacServiceClient) sendGetUserAttributes(userToken string, tokenType string, snippetType string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserAttributes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceGetUserAttributesArgs{
		UserToken:   userToken,
		TokenType:   tokenType,
		SnippetType: snippetType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvGetUserAttributes() (value *UserAttributesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserAttributes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserAttributes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserAttributes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserAttributes failed: invalid message type")
		return
	}
	result := AacServiceGetUserAttributesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	}
	value = result.GetSuccess()
	return
}

// Clears user attributes from cache
//
//  @param userToken. User token
//  @param tokenType. Type of user token
//
//  @throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - TokenType
func (p *AacServiceClient) ClearUserAttributesFromCache(userToken string, tokenType string) (r *ClearUserAttributesResponse, err error) {
	if err = p.sendClearUserAttributesFromCache(userToken, tokenType); err != nil {
		return
	}
	return p.recvClearUserAttributesFromCache()
}

func (p *AacServiceClient) sendClearUserAttributesFromCache(userToken string, tokenType string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearUserAttributesFromCache", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceClearUserAttributesFromCacheArgs{
		UserToken: userToken,
		TokenType: tokenType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvClearUserAttributesFromCache() (value *ClearUserAttributesResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clearUserAttributesFromCache" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clearUserAttributesFromCache failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearUserAttributesFromCache failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clearUserAttributesFromCache failed: invalid message type")
		return
	}
	result := AacServiceClearUserAttributesFromCacheResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	}
	value = result.GetSuccess()
	return
}

// Generates snippets of a given type based on the user's attributes
//
// @param userToken. User token
// @param tokenType. Type of user token
// @param type. Snippet type. Supported types are Mongo and ES.
//
// @throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - TokenType
//  - SnippetType
func (p *AacServiceClient) GetSnippets(userToken string, tokenType string, snippetType string) (r *SnippetResponse, err error) {
	if err = p.sendGetSnippets(userToken, tokenType, snippetType); err != nil {
		return
	}
	return p.recvGetSnippets()
}

func (p *AacServiceClient) sendGetSnippets(userToken string, tokenType string, snippetType string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSnippets", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceGetSnippetsArgs{
		UserToken:   userToken,
		TokenType:   tokenType,
		SnippetType: snippetType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvGetSnippets() (value *SnippetResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSnippets" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSnippets failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSnippets failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSnippets failed: invalid message type")
		return
	}
	result := AacServiceGetSnippetsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	}
	value = result.GetSuccess()
	return
}

// Generates a share object for a given type.
//
//  @param userToken. User token
//  @param tokenType. Type of user token
//  @param shareType. Share type. Supported types are public, private, and other.
//  @param share. Share object if share type is other.
//
//  @throws SecurityServiceException
//
// Parameters:
//  - UserToken
//  - TokenType
//  - ShareType
//  - Share
func (p *AacServiceClient) GetShare(userToken string, tokenType string, shareType string, share string) (r *ShareResponse, err error) {
	if err = p.sendGetShare(userToken, tokenType, shareType, share); err != nil {
		return
	}
	return p.recvGetShare()
}

func (p *AacServiceClient) sendGetShare(userToken string, tokenType string, shareType string, share string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getShare", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AacServiceGetShareArgs{
		UserToken: userToken,
		TokenType: tokenType,
		ShareType: shareType,
		Share:     share,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AacServiceClient) recvGetShare() (value *ShareResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getShare" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getShare failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getShare failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getShare failed: invalid message type")
		return
	}
	result := AacServiceGetShareResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex1 != nil {
		err = result.Ex1
		return
	}
	value = result.GetSuccess()
	return
}

type AacServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AacService
}

func (p *AacServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AacServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AacServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAacServiceProcessor(handler AacService) *AacServiceProcessor {

	self40 := &AacServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self40.processorMap["buildAcm"] = &aacServiceProcessorBuildAcm{handler: handler}
	self40.processorMap["validateAcms"] = &aacServiceProcessorValidateAcms{handler: handler}
	self40.processorMap["validateAcm"] = &aacServiceProcessorValidateAcm{handler: handler}
	self40.processorMap["populateAndValidateAcm"] = &aacServiceProcessorPopulateAndValidateAcm{handler: handler}
	self40.processorMap["populateAndValidateAcmFromCapcoString"] = &aacServiceProcessorPopulateAndValidateAcmFromCapcoString{handler: handler}
	self40.processorMap["isCountryTrigraph"] = &aacServiceProcessorIsCountryTrigraph{handler: handler}
	self40.processorMap["createAcmFromBannerMarking"] = &aacServiceProcessorCreateAcmFromBannerMarking{handler: handler}
	self40.processorMap["rollupAcms"] = &aacServiceProcessorRollupAcms{handler: handler}
	self40.processorMap["checkAccess"] = &aacServiceProcessorCheckAccess{handler: handler}
	self40.processorMap["checkAccessAndPopulate"] = &aacServiceProcessorCheckAccessAndPopulate{handler: handler}
	self40.processorMap["getUserAttributes"] = &aacServiceProcessorGetUserAttributes{handler: handler}
	self40.processorMap["clearUserAttributesFromCache"] = &aacServiceProcessorClearUserAttributesFromCache{handler: handler}
	self40.processorMap["getSnippets"] = &aacServiceProcessorGetSnippets{handler: handler}
	self40.processorMap["getShare"] = &aacServiceProcessorGetShare{handler: handler}
	return self40
}

func (p *AacServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x41 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x41.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x41

}

type aacServiceProcessorBuildAcm struct {
	handler AacService
}

func (p *aacServiceProcessorBuildAcm) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceBuildAcmArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("buildAcm", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceBuildAcmResult{}
	var retval *AcmResponse
	var err2 error
	if retval, err2 = p.handler.BuildAcm(args.ByteList, args.DataType, args.PropertiesMap); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing buildAcm: "+err2.Error())
			oprot.WriteMessageBegin("buildAcm", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("buildAcm", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorValidateAcms struct {
	handler AacService
}

func (p *aacServiceProcessorValidateAcms) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceValidateAcmsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("validateAcms", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceValidateAcmsResult{}
	var retval *ValidateAcmsResponse
	var err2 error
	if retval, err2 = p.handler.ValidateAcms(args.AcmInfoList, args.UserToken, args.TokenType, args.ShareType, args.Share, args.Rollup, args.Populate); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing validateAcms: "+err2.Error())
			oprot.WriteMessageBegin("validateAcms", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("validateAcms", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorValidateAcm struct {
	handler AacService
}

func (p *aacServiceProcessorValidateAcm) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceValidateAcmArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("validateAcm", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceValidateAcmResult{}
	var retval *AcmResponse
	var err2 error
	if retval, err2 = p.handler.ValidateAcm(args.Acm); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing validateAcm: "+err2.Error())
			oprot.WriteMessageBegin("validateAcm", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("validateAcm", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorPopulateAndValidateAcm struct {
	handler AacService
}

func (p *aacServiceProcessorPopulateAndValidateAcm) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServicePopulateAndValidateAcmArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("populateAndValidateAcm", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServicePopulateAndValidateAcmResult{}
	var retval *AcmResponse
	var err2 error
	if retval, err2 = p.handler.PopulateAndValidateAcm(args.Acm); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing populateAndValidateAcm: "+err2.Error())
			oprot.WriteMessageBegin("populateAndValidateAcm", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("populateAndValidateAcm", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorPopulateAndValidateAcmFromCapcoString struct {
	handler AacService
}

func (p *aacServiceProcessorPopulateAndValidateAcmFromCapcoString) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServicePopulateAndValidateAcmFromCapcoStringArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("populateAndValidateAcmFromCapcoString", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServicePopulateAndValidateAcmFromCapcoStringResult{}
	var retval *AcmResponse
	var err2 error
	if retval, err2 = p.handler.PopulateAndValidateAcmFromCapcoString(args.CapcoString, args.CapcoStringTypes); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing populateAndValidateAcmFromCapcoString: "+err2.Error())
			oprot.WriteMessageBegin("populateAndValidateAcmFromCapcoString", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("populateAndValidateAcmFromCapcoString", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorIsCountryTrigraph struct {
	handler AacService
}

func (p *aacServiceProcessorIsCountryTrigraph) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceIsCountryTrigraphArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isCountryTrigraph", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceIsCountryTrigraphResult{}
	var retval *ValidateTrigraphResponse
	var err2 error
	if retval, err2 = p.handler.IsCountryTrigraph(args.Trigraph); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isCountryTrigraph: "+err2.Error())
			oprot.WriteMessageBegin("isCountryTrigraph", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("isCountryTrigraph", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorCreateAcmFromBannerMarking struct {
	handler AacService
}

func (p *aacServiceProcessorCreateAcmFromBannerMarking) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceCreateAcmFromBannerMarkingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createAcmFromBannerMarking", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceCreateAcmFromBannerMarkingResult{}
	var retval *AcmResponse
	var err2 error
	if retval, err2 = p.handler.CreateAcmFromBannerMarking(args.Banner, args.ShareType, args.Share); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createAcmFromBannerMarking: "+err2.Error())
			oprot.WriteMessageBegin("createAcmFromBannerMarking", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createAcmFromBannerMarking", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorRollupAcms struct {
	handler AacService
}

func (p *aacServiceProcessorRollupAcms) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceRollupAcmsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rollupAcms", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceRollupAcmsResult{}
	var retval *AcmResponse
	var err2 error
	if retval, err2 = p.handler.RollupAcms(args.UserToken, args.AcmList, args.ShareType, args.Share); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rollupAcms: "+err2.Error())
			oprot.WriteMessageBegin("rollupAcms", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("rollupAcms", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorCheckAccess struct {
	handler AacService
}

func (p *aacServiceProcessorCheckAccess) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceCheckAccessArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkAccess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceCheckAccessResult{}
	var retval *CheckAccessResponse
	var err2 error
	if retval, err2 = p.handler.CheckAccess(args.UserToken, args.TokenType, args.Acm); err2 != nil {
		switch v := err2.(type) {
		case *InvalidInputException:
			result.Ex1 = v
		case *SecurityServiceException:
			result.Ex2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAccess: "+err2.Error())
			oprot.WriteMessageBegin("checkAccess", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("checkAccess", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorCheckAccessAndPopulate struct {
	handler AacService
}

func (p *aacServiceProcessorCheckAccessAndPopulate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceCheckAccessAndPopulateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkAccessAndPopulate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceCheckAccessAndPopulateResult{}
	var retval *CheckAccessAndPopulateResponse
	var err2 error
	if retval, err2 = p.handler.CheckAccessAndPopulate(args.UserToken, args.TokenType, args.AcmInfoList, args.CalculateRollup, args.ShareType, args.Share); err2 != nil {
		switch v := err2.(type) {
		case *SecurityServiceException:
			result.Ex1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAccessAndPopulate: "+err2.Error())
			oprot.WriteMessageBegin("checkAccessAndPopulate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("checkAccessAndPopulate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorGetUserAttributes struct {
	handler AacService
}

func (p *aacServiceProcessorGetUserAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceGetUserAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceGetUserAttributesResult{}
	var retval *UserAttributesResponse
	var err2 error
	if retval, err2 = p.handler.GetUserAttributes(args.UserToken, args.TokenType, args.SnippetType); err2 != nil {
		switch v := err2.(type) {
		case *SecurityServiceException:
			result.Ex1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserAttributes: "+err2.Error())
			oprot.WriteMessageBegin("getUserAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorClearUserAttributesFromCache struct {
	handler AacService
}

func (p *aacServiceProcessorClearUserAttributesFromCache) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceClearUserAttributesFromCacheArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearUserAttributesFromCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceClearUserAttributesFromCacheResult{}
	var retval *ClearUserAttributesResponse
	var err2 error
	if retval, err2 = p.handler.ClearUserAttributesFromCache(args.UserToken, args.TokenType); err2 != nil {
		switch v := err2.(type) {
		case *SecurityServiceException:
			result.Ex1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearUserAttributesFromCache: "+err2.Error())
			oprot.WriteMessageBegin("clearUserAttributesFromCache", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("clearUserAttributesFromCache", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorGetSnippets struct {
	handler AacService
}

func (p *aacServiceProcessorGetSnippets) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceGetSnippetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSnippets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceGetSnippetsResult{}
	var retval *SnippetResponse
	var err2 error
	if retval, err2 = p.handler.GetSnippets(args.UserToken, args.TokenType, args.SnippetType); err2 != nil {
		switch v := err2.(type) {
		case *SecurityServiceException:
			result.Ex1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSnippets: "+err2.Error())
			oprot.WriteMessageBegin("getSnippets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSnippets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aacServiceProcessorGetShare struct {
	handler AacService
}

func (p *aacServiceProcessorGetShare) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AacServiceGetShareArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getShare", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AacServiceGetShareResult{}
	var retval *ShareResponse
	var err2 error
	if retval, err2 = p.handler.GetShare(args.UserToken, args.TokenType, args.ShareType, args.Share); err2 != nil {
		switch v := err2.(type) {
		case *SecurityServiceException:
			result.Ex1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getShare: "+err2.Error())
			oprot.WriteMessageBegin("getShare", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getShare", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ByteList
//  - DataType
//  - PropertiesMap
type AacServiceBuildAcmArgs struct {
	ByteList      []int8            `thrift:"byteList,1" json:"byteList"`
	DataType      string            `thrift:"dataType,2" json:"dataType"`
	PropertiesMap map[string]string `thrift:"propertiesMap,3" json:"propertiesMap"`
}

func NewAacServiceBuildAcmArgs() *AacServiceBuildAcmArgs {
	return &AacServiceBuildAcmArgs{}
}

func (p *AacServiceBuildAcmArgs) GetByteList() []int8 {
	return p.ByteList
}

func (p *AacServiceBuildAcmArgs) GetDataType() string {
	return p.DataType
}

func (p *AacServiceBuildAcmArgs) GetPropertiesMap() map[string]string {
	return p.PropertiesMap
}
func (p *AacServiceBuildAcmArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceBuildAcmArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int8, 0, size)
	p.ByteList = tSlice
	for i := 0; i < size; i++ {
		var _elem42 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem42 = temp
		}
		p.ByteList = append(p.ByteList, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AacServiceBuildAcmArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DataType = v
	}
	return nil
}

func (p *AacServiceBuildAcmArgs) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.PropertiesMap = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key43 = v
		}
		var _val44 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val44 = v
		}
		p.PropertiesMap[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AacServiceBuildAcmArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buildAcm_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceBuildAcmArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("byteList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:byteList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.BYTE, len(p.ByteList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ByteList {
		if err := oprot.WriteByte(int8(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:byteList: ", p), err)
	}
	return err
}

func (p *AacServiceBuildAcmArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataType: ", p), err)
	}
	if err := oprot.WriteString(string(p.DataType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dataType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataType: ", p), err)
	}
	return err
}

func (p *AacServiceBuildAcmArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("propertiesMap", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:propertiesMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PropertiesMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.PropertiesMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:propertiesMap: ", p), err)
	}
	return err
}

func (p *AacServiceBuildAcmArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceBuildAcmArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceBuildAcmResult struct {
	Success *AcmResponse              `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceBuildAcmResult() *AacServiceBuildAcmResult {
	return &AacServiceBuildAcmResult{}
}

var AacServiceBuildAcmResult_Success_DEFAULT *AcmResponse

func (p *AacServiceBuildAcmResult) GetSuccess() *AcmResponse {
	if !p.IsSetSuccess() {
		return AacServiceBuildAcmResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceBuildAcmResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceBuildAcmResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceBuildAcmResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceBuildAcmResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceBuildAcmResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceBuildAcmResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceBuildAcmResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceBuildAcmResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceBuildAcmResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceBuildAcmResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceBuildAcmResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AcmResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceBuildAcmResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceBuildAcmResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceBuildAcmResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("buildAcm_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceBuildAcmResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceBuildAcmResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceBuildAcmResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceBuildAcmResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceBuildAcmResult(%+v)", *p)
}

// Attributes:
//  - AcmInfoList
//  - UserToken
//  - TokenType
//  - ShareType
//  - Share
//  - Rollup
//  - Populate
type AacServiceValidateAcmsArgs struct {
	AcmInfoList []*AcmInfo `thrift:"acmInfoList,1" json:"acmInfoList"`
	UserToken   string     `thrift:"userToken,2" json:"userToken"`
	TokenType   string     `thrift:"tokenType,3" json:"tokenType"`
	ShareType   string     `thrift:"shareType,4" json:"shareType"`
	Share       string     `thrift:"share,5" json:"share"`
	Rollup      bool       `thrift:"rollup,6" json:"rollup"`
	Populate    bool       `thrift:"populate,7" json:"populate"`
}

func NewAacServiceValidateAcmsArgs() *AacServiceValidateAcmsArgs {
	return &AacServiceValidateAcmsArgs{}
}

func (p *AacServiceValidateAcmsArgs) GetAcmInfoList() []*AcmInfo {
	return p.AcmInfoList
}

func (p *AacServiceValidateAcmsArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceValidateAcmsArgs) GetTokenType() string {
	return p.TokenType
}

func (p *AacServiceValidateAcmsArgs) GetShareType() string {
	return p.ShareType
}

func (p *AacServiceValidateAcmsArgs) GetShare() string {
	return p.Share
}

func (p *AacServiceValidateAcmsArgs) GetRollup() bool {
	return p.Rollup
}

func (p *AacServiceValidateAcmsArgs) GetPopulate() bool {
	return p.Populate
}
func (p *AacServiceValidateAcmsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AcmInfo, 0, size)
	p.AcmInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem45 := &AcmInfo{}
		if err := _elem45.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
		}
		p.AcmInfoList = append(p.AcmInfoList, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ShareType = v
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Rollup = v
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Populate = v
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("validateAcms_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceValidateAcmsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acmInfoList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acmInfoList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AcmInfoList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AcmInfoList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acmInfoList: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareType", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shareType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShareType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shareType: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:share: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rollup", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rollup: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Rollup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rollup (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rollup: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("populate", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:populate: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Populate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.populate (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:populate: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceValidateAcmsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceValidateAcmsResult struct {
	Success *ValidateAcmsResponse     `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceValidateAcmsResult() *AacServiceValidateAcmsResult {
	return &AacServiceValidateAcmsResult{}
}

var AacServiceValidateAcmsResult_Success_DEFAULT *ValidateAcmsResponse

func (p *AacServiceValidateAcmsResult) GetSuccess() *ValidateAcmsResponse {
	if !p.IsSetSuccess() {
		return AacServiceValidateAcmsResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceValidateAcmsResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceValidateAcmsResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceValidateAcmsResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceValidateAcmsResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceValidateAcmsResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceValidateAcmsResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceValidateAcmsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceValidateAcmsResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceValidateAcmsResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceValidateAcmsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceValidateAcmsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ValidateAcmsResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceValidateAcmsResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceValidateAcmsResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceValidateAcmsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("validateAcms_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceValidateAcmsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceValidateAcmsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceValidateAcmsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceValidateAcmsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceValidateAcmsResult(%+v)", *p)
}

// Attributes:
//  - Acm
type AacServiceValidateAcmArgs struct {
	Acm string `thrift:"acm,1" json:"acm"`
}

func NewAacServiceValidateAcmArgs() *AacServiceValidateAcmArgs {
	return &AacServiceValidateAcmArgs{}
}

func (p *AacServiceValidateAcmArgs) GetAcm() string {
	return p.Acm
}
func (p *AacServiceValidateAcmArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceValidateAcmArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Acm = v
	}
	return nil
}

func (p *AacServiceValidateAcmArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("validateAcm_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceValidateAcmArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acm", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acm: ", p), err)
	}
	if err := oprot.WriteString(string(p.Acm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acm (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acm: ", p), err)
	}
	return err
}

func (p *AacServiceValidateAcmArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceValidateAcmArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceValidateAcmResult struct {
	Success *AcmResponse              `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceValidateAcmResult() *AacServiceValidateAcmResult {
	return &AacServiceValidateAcmResult{}
}

var AacServiceValidateAcmResult_Success_DEFAULT *AcmResponse

func (p *AacServiceValidateAcmResult) GetSuccess() *AcmResponse {
	if !p.IsSetSuccess() {
		return AacServiceValidateAcmResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceValidateAcmResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceValidateAcmResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceValidateAcmResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceValidateAcmResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceValidateAcmResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceValidateAcmResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceValidateAcmResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceValidateAcmResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceValidateAcmResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceValidateAcmResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceValidateAcmResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AcmResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceValidateAcmResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceValidateAcmResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceValidateAcmResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("validateAcm_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceValidateAcmResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceValidateAcmResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceValidateAcmResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceValidateAcmResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceValidateAcmResult(%+v)", *p)
}

// Attributes:
//  - Acm
type AacServicePopulateAndValidateAcmArgs struct {
	Acm string `thrift:"acm,1" json:"acm"`
}

func NewAacServicePopulateAndValidateAcmArgs() *AacServicePopulateAndValidateAcmArgs {
	return &AacServicePopulateAndValidateAcmArgs{}
}

func (p *AacServicePopulateAndValidateAcmArgs) GetAcm() string {
	return p.Acm
}
func (p *AacServicePopulateAndValidateAcmArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Acm = v
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("populateAndValidateAcm_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acm", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acm: ", p), err)
	}
	if err := oprot.WriteString(string(p.Acm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acm (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acm: ", p), err)
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServicePopulateAndValidateAcmArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServicePopulateAndValidateAcmResult struct {
	Success *AcmResponse              `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServicePopulateAndValidateAcmResult() *AacServicePopulateAndValidateAcmResult {
	return &AacServicePopulateAndValidateAcmResult{}
}

var AacServicePopulateAndValidateAcmResult_Success_DEFAULT *AcmResponse

func (p *AacServicePopulateAndValidateAcmResult) GetSuccess() *AcmResponse {
	if !p.IsSetSuccess() {
		return AacServicePopulateAndValidateAcmResult_Success_DEFAULT
	}
	return p.Success
}

var AacServicePopulateAndValidateAcmResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServicePopulateAndValidateAcmResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServicePopulateAndValidateAcmResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServicePopulateAndValidateAcmResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServicePopulateAndValidateAcmResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServicePopulateAndValidateAcmResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServicePopulateAndValidateAcmResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServicePopulateAndValidateAcmResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServicePopulateAndValidateAcmResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServicePopulateAndValidateAcmResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AcmResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("populateAndValidateAcm_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServicePopulateAndValidateAcmResult(%+v)", *p)
}

// Attributes:
//  - CapcoString
//  - CapcoStringTypes
type AacServicePopulateAndValidateAcmFromCapcoStringArgs struct {
	CapcoString      string `thrift:"capcoString,1" json:"capcoString"`
	CapcoStringTypes string `thrift:"capcoStringTypes,2" json:"capcoStringTypes"`
}

func NewAacServicePopulateAndValidateAcmFromCapcoStringArgs() *AacServicePopulateAndValidateAcmFromCapcoStringArgs {
	return &AacServicePopulateAndValidateAcmFromCapcoStringArgs{}
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) GetCapcoString() string {
	return p.CapcoString
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) GetCapcoStringTypes() string {
	return p.CapcoStringTypes
}
func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CapcoString = v
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CapcoStringTypes = v
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("populateAndValidateAcmFromCapcoString_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capcoString", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:capcoString: ", p), err)
	}
	if err := oprot.WriteString(string(p.CapcoString)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capcoString (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:capcoString: ", p), err)
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capcoStringTypes", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capcoStringTypes: ", p), err)
	}
	if err := oprot.WriteString(string(p.CapcoStringTypes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capcoStringTypes (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capcoStringTypes: ", p), err)
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServicePopulateAndValidateAcmFromCapcoStringArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServicePopulateAndValidateAcmFromCapcoStringResult struct {
	Success *AcmResponse              `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServicePopulateAndValidateAcmFromCapcoStringResult() *AacServicePopulateAndValidateAcmFromCapcoStringResult {
	return &AacServicePopulateAndValidateAcmFromCapcoStringResult{}
}

var AacServicePopulateAndValidateAcmFromCapcoStringResult_Success_DEFAULT *AcmResponse

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) GetSuccess() *AcmResponse {
	if !p.IsSetSuccess() {
		return AacServicePopulateAndValidateAcmFromCapcoStringResult_Success_DEFAULT
	}
	return p.Success
}

var AacServicePopulateAndValidateAcmFromCapcoStringResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServicePopulateAndValidateAcmFromCapcoStringResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServicePopulateAndValidateAcmFromCapcoStringResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServicePopulateAndValidateAcmFromCapcoStringResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AcmResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("populateAndValidateAcmFromCapcoString_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServicePopulateAndValidateAcmFromCapcoStringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServicePopulateAndValidateAcmFromCapcoStringResult(%+v)", *p)
}

// Attributes:
//  - Trigraph
type AacServiceIsCountryTrigraphArgs struct {
	Trigraph string `thrift:"trigraph,1" json:"trigraph"`
}

func NewAacServiceIsCountryTrigraphArgs() *AacServiceIsCountryTrigraphArgs {
	return &AacServiceIsCountryTrigraphArgs{}
}

func (p *AacServiceIsCountryTrigraphArgs) GetTrigraph() string {
	return p.Trigraph
}
func (p *AacServiceIsCountryTrigraphArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Trigraph = v
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isCountryTrigraph_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trigraph", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:trigraph: ", p), err)
	}
	if err := oprot.WriteString(string(p.Trigraph)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trigraph (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:trigraph: ", p), err)
	}
	return err
}

func (p *AacServiceIsCountryTrigraphArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceIsCountryTrigraphArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceIsCountryTrigraphResult struct {
	Success *ValidateTrigraphResponse `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceIsCountryTrigraphResult() *AacServiceIsCountryTrigraphResult {
	return &AacServiceIsCountryTrigraphResult{}
}

var AacServiceIsCountryTrigraphResult_Success_DEFAULT *ValidateTrigraphResponse

func (p *AacServiceIsCountryTrigraphResult) GetSuccess() *ValidateTrigraphResponse {
	if !p.IsSetSuccess() {
		return AacServiceIsCountryTrigraphResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceIsCountryTrigraphResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceIsCountryTrigraphResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceIsCountryTrigraphResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceIsCountryTrigraphResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceIsCountryTrigraphResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceIsCountryTrigraphResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceIsCountryTrigraphResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceIsCountryTrigraphResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceIsCountryTrigraphResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceIsCountryTrigraphResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ValidateTrigraphResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isCountryTrigraph_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceIsCountryTrigraphResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceIsCountryTrigraphResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceIsCountryTrigraphResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceIsCountryTrigraphResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceIsCountryTrigraphResult(%+v)", *p)
}

// Attributes:
//  - Banner
//  - ShareType
//  - Share
type AacServiceCreateAcmFromBannerMarkingArgs struct {
	Banner    string `thrift:"banner,1" json:"banner"`
	ShareType string `thrift:"shareType,2" json:"shareType"`
	Share     string `thrift:"share,3" json:"share"`
}

func NewAacServiceCreateAcmFromBannerMarkingArgs() *AacServiceCreateAcmFromBannerMarkingArgs {
	return &AacServiceCreateAcmFromBannerMarkingArgs{}
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) GetBanner() string {
	return p.Banner
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) GetShareType() string {
	return p.ShareType
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) GetShare() string {
	return p.Share
}
func (p *AacServiceCreateAcmFromBannerMarkingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Banner = v
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ShareType = v
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createAcmFromBannerMarking_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("banner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:banner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Banner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.banner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:banner: ", p), err)
	}
	return err
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shareType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShareType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shareType: ", p), err)
	}
	return err
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:share: ", p), err)
	}
	return err
}

func (p *AacServiceCreateAcmFromBannerMarkingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceCreateAcmFromBannerMarkingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceCreateAcmFromBannerMarkingResult struct {
	Success *AcmResponse              `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceCreateAcmFromBannerMarkingResult() *AacServiceCreateAcmFromBannerMarkingResult {
	return &AacServiceCreateAcmFromBannerMarkingResult{}
}

var AacServiceCreateAcmFromBannerMarkingResult_Success_DEFAULT *AcmResponse

func (p *AacServiceCreateAcmFromBannerMarkingResult) GetSuccess() *AcmResponse {
	if !p.IsSetSuccess() {
		return AacServiceCreateAcmFromBannerMarkingResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceCreateAcmFromBannerMarkingResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceCreateAcmFromBannerMarkingResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceCreateAcmFromBannerMarkingResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceCreateAcmFromBannerMarkingResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceCreateAcmFromBannerMarkingResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceCreateAcmFromBannerMarkingResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceCreateAcmFromBannerMarkingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AcmResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createAcmFromBannerMarking_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCreateAcmFromBannerMarkingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceCreateAcmFromBannerMarkingResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - AcmList
//  - ShareType
//  - Share
type AacServiceRollupAcmsArgs struct {
	UserToken string   `thrift:"userToken,1" json:"userToken"`
	AcmList   []string `thrift:"acmList,2" json:"acmList"`
	ShareType string   `thrift:"shareType,3" json:"shareType"`
	Share     string   `thrift:"share,4" json:"share"`
}

func NewAacServiceRollupAcmsArgs() *AacServiceRollupAcmsArgs {
	return &AacServiceRollupAcmsArgs{}
}

func (p *AacServiceRollupAcmsArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceRollupAcmsArgs) GetAcmList() []string {
	return p.AcmList
}

func (p *AacServiceRollupAcmsArgs) GetShareType() string {
	return p.ShareType
}

func (p *AacServiceRollupAcmsArgs) GetShare() string {
	return p.Share
}
func (p *AacServiceRollupAcmsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceRollupAcmsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceRollupAcmsArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.AcmList = tSlice
	for i := 0; i < size; i++ {
		var _elem46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem46 = v
		}
		p.AcmList = append(p.AcmList, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AacServiceRollupAcmsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShareType = v
	}
	return nil
}

func (p *AacServiceRollupAcmsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *AacServiceRollupAcmsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rollupAcms_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceRollupAcmsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceRollupAcmsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acmList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:acmList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.AcmList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AcmList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:acmList: ", p), err)
	}
	return err
}

func (p *AacServiceRollupAcmsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareType", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:shareType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShareType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:shareType: ", p), err)
	}
	return err
}

func (p *AacServiceRollupAcmsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:share: ", p), err)
	}
	return err
}

func (p *AacServiceRollupAcmsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceRollupAcmsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceRollupAcmsResult struct {
	Success *AcmResponse              `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceRollupAcmsResult() *AacServiceRollupAcmsResult {
	return &AacServiceRollupAcmsResult{}
}

var AacServiceRollupAcmsResult_Success_DEFAULT *AcmResponse

func (p *AacServiceRollupAcmsResult) GetSuccess() *AcmResponse {
	if !p.IsSetSuccess() {
		return AacServiceRollupAcmsResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceRollupAcmsResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceRollupAcmsResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceRollupAcmsResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceRollupAcmsResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceRollupAcmsResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceRollupAcmsResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceRollupAcmsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceRollupAcmsResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceRollupAcmsResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceRollupAcmsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceRollupAcmsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &AcmResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceRollupAcmsResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceRollupAcmsResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceRollupAcmsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rollupAcms_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceRollupAcmsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceRollupAcmsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceRollupAcmsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceRollupAcmsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceRollupAcmsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TokenType
//  - Acm
type AacServiceCheckAccessArgs struct {
	UserToken string `thrift:"userToken,1" json:"userToken"`
	TokenType string `thrift:"tokenType,2" json:"tokenType"`
	Acm       string `thrift:"acm,3" json:"acm"`
}

func NewAacServiceCheckAccessArgs() *AacServiceCheckAccessArgs {
	return &AacServiceCheckAccessArgs{}
}

func (p *AacServiceCheckAccessArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceCheckAccessArgs) GetTokenType() string {
	return p.TokenType
}

func (p *AacServiceCheckAccessArgs) GetAcm() string {
	return p.Acm
}
func (p *AacServiceCheckAccessArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceCheckAccessArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceCheckAccessArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceCheckAccessArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Acm = v
	}
	return nil
}

func (p *AacServiceCheckAccessArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkAccess_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceCheckAccessArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acm", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:acm: ", p), err)
	}
	if err := oprot.WriteString(string(p.Acm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acm (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:acm: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceCheckAccessArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
//  - Ex2
type AacServiceCheckAccessResult struct {
	Success *CheckAccessResponse      `thrift:"success,0" json:"success,omitempty"`
	Ex1     *InvalidInputException    `thrift:"ex1,1" json:"ex1,omitempty"`
	Ex2     *SecurityServiceException `thrift:"ex2,2" json:"ex2,omitempty"`
}

func NewAacServiceCheckAccessResult() *AacServiceCheckAccessResult {
	return &AacServiceCheckAccessResult{}
}

var AacServiceCheckAccessResult_Success_DEFAULT *CheckAccessResponse

func (p *AacServiceCheckAccessResult) GetSuccess() *CheckAccessResponse {
	if !p.IsSetSuccess() {
		return AacServiceCheckAccessResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceCheckAccessResult_Ex1_DEFAULT *InvalidInputException

func (p *AacServiceCheckAccessResult) GetEx1() *InvalidInputException {
	if !p.IsSetEx1() {
		return AacServiceCheckAccessResult_Ex1_DEFAULT
	}
	return p.Ex1
}

var AacServiceCheckAccessResult_Ex2_DEFAULT *SecurityServiceException

func (p *AacServiceCheckAccessResult) GetEx2() *SecurityServiceException {
	if !p.IsSetEx2() {
		return AacServiceCheckAccessResult_Ex2_DEFAULT
	}
	return p.Ex2
}
func (p *AacServiceCheckAccessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceCheckAccessResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceCheckAccessResult) IsSetEx2() bool {
	return p.Ex2 != nil
}

func (p *AacServiceCheckAccessResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceCheckAccessResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &CheckAccessResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceCheckAccessResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &InvalidInputException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceCheckAccessResult) readField2(iprot thrift.TProtocol) error {
	p.Ex2 = &SecurityServiceException{}
	if err := p.Ex2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex2), err)
	}
	return nil
}

func (p *AacServiceCheckAccessResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkAccess_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceCheckAccessResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCheckAccessResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCheckAccessResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx2() {
		if err := oprot.WriteFieldBegin("ex2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ex2: ", p), err)
		}
		if err := p.Ex2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ex2: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCheckAccessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceCheckAccessResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TokenType
//  - AcmInfoList
//  - CalculateRollup
//  - ShareType
//  - Share
type AacServiceCheckAccessAndPopulateArgs struct {
	UserToken       string     `thrift:"userToken,1" json:"userToken"`
	TokenType       string     `thrift:"tokenType,2" json:"tokenType"`
	AcmInfoList     []*AcmInfo `thrift:"acmInfoList,3" json:"acmInfoList"`
	CalculateRollup bool       `thrift:"calculateRollup,4" json:"calculateRollup"`
	ShareType       string     `thrift:"shareType,5" json:"shareType"`
	Share           string     `thrift:"share,6" json:"share"`
}

func NewAacServiceCheckAccessAndPopulateArgs() *AacServiceCheckAccessAndPopulateArgs {
	return &AacServiceCheckAccessAndPopulateArgs{}
}

func (p *AacServiceCheckAccessAndPopulateArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceCheckAccessAndPopulateArgs) GetTokenType() string {
	return p.TokenType
}

func (p *AacServiceCheckAccessAndPopulateArgs) GetAcmInfoList() []*AcmInfo {
	return p.AcmInfoList
}

func (p *AacServiceCheckAccessAndPopulateArgs) GetCalculateRollup() bool {
	return p.CalculateRollup
}

func (p *AacServiceCheckAccessAndPopulateArgs) GetShareType() string {
	return p.ShareType
}

func (p *AacServiceCheckAccessAndPopulateArgs) GetShare() string {
	return p.Share
}
func (p *AacServiceCheckAccessAndPopulateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AcmInfo, 0, size)
	p.AcmInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem47 := &AcmInfo{}
		if err := _elem47.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
		}
		p.AcmInfoList = append(p.AcmInfoList, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CalculateRollup = v
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ShareType = v
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkAccessAndPopulate_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acmInfoList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:acmInfoList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AcmInfoList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AcmInfoList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:acmInfoList: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("calculateRollup", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:calculateRollup: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CalculateRollup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.calculateRollup (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:calculateRollup: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareType", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shareType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShareType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shareType: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:share: ", p), err)
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceCheckAccessAndPopulateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type AacServiceCheckAccessAndPopulateResult struct {
	Success *CheckAccessAndPopulateResponse `thrift:"success,0" json:"success,omitempty"`
	Ex1     *SecurityServiceException       `thrift:"ex1,1" json:"ex1,omitempty"`
}

func NewAacServiceCheckAccessAndPopulateResult() *AacServiceCheckAccessAndPopulateResult {
	return &AacServiceCheckAccessAndPopulateResult{}
}

var AacServiceCheckAccessAndPopulateResult_Success_DEFAULT *CheckAccessAndPopulateResponse

func (p *AacServiceCheckAccessAndPopulateResult) GetSuccess() *CheckAccessAndPopulateResponse {
	if !p.IsSetSuccess() {
		return AacServiceCheckAccessAndPopulateResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceCheckAccessAndPopulateResult_Ex1_DEFAULT *SecurityServiceException

func (p *AacServiceCheckAccessAndPopulateResult) GetEx1() *SecurityServiceException {
	if !p.IsSetEx1() {
		return AacServiceCheckAccessAndPopulateResult_Ex1_DEFAULT
	}
	return p.Ex1
}
func (p *AacServiceCheckAccessAndPopulateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceCheckAccessAndPopulateResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceCheckAccessAndPopulateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &CheckAccessAndPopulateResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &SecurityServiceException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkAccessAndPopulate_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceCheckAccessAndPopulateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceCheckAccessAndPopulateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceCheckAccessAndPopulateResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TokenType
//  - SnippetType
type AacServiceGetUserAttributesArgs struct {
	UserToken   string `thrift:"userToken,1" json:"userToken"`
	TokenType   string `thrift:"tokenType,2" json:"tokenType"`
	SnippetType string `thrift:"snippetType,3" json:"snippetType"`
}

func NewAacServiceGetUserAttributesArgs() *AacServiceGetUserAttributesArgs {
	return &AacServiceGetUserAttributesArgs{}
}

func (p *AacServiceGetUserAttributesArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceGetUserAttributesArgs) GetTokenType() string {
	return p.TokenType
}

func (p *AacServiceGetUserAttributesArgs) GetSnippetType() string {
	return p.SnippetType
}
func (p *AacServiceGetUserAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceGetUserAttributesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceGetUserAttributesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceGetUserAttributesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SnippetType = v
	}
	return nil
}

func (p *AacServiceGetUserAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAttributes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceGetUserAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceGetUserAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceGetUserAttributesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snippetType", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snippetType: ", p), err)
	}
	if err := oprot.WriteString(string(p.SnippetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snippetType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snippetType: ", p), err)
	}
	return err
}

func (p *AacServiceGetUserAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceGetUserAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type AacServiceGetUserAttributesResult struct {
	Success *UserAttributesResponse   `thrift:"success,0" json:"success,omitempty"`
	Ex1     *SecurityServiceException `thrift:"ex1,1" json:"ex1,omitempty"`
}

func NewAacServiceGetUserAttributesResult() *AacServiceGetUserAttributesResult {
	return &AacServiceGetUserAttributesResult{}
}

var AacServiceGetUserAttributesResult_Success_DEFAULT *UserAttributesResponse

func (p *AacServiceGetUserAttributesResult) GetSuccess() *UserAttributesResponse {
	if !p.IsSetSuccess() {
		return AacServiceGetUserAttributesResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceGetUserAttributesResult_Ex1_DEFAULT *SecurityServiceException

func (p *AacServiceGetUserAttributesResult) GetEx1() *SecurityServiceException {
	if !p.IsSetEx1() {
		return AacServiceGetUserAttributesResult_Ex1_DEFAULT
	}
	return p.Ex1
}
func (p *AacServiceGetUserAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceGetUserAttributesResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceGetUserAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceGetUserAttributesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &UserAttributesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceGetUserAttributesResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &SecurityServiceException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceGetUserAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAttributes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceGetUserAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceGetUserAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceGetUserAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceGetUserAttributesResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TokenType
type AacServiceClearUserAttributesFromCacheArgs struct {
	UserToken string `thrift:"userToken,1" json:"userToken"`
	TokenType string `thrift:"tokenType,2" json:"tokenType"`
}

func NewAacServiceClearUserAttributesFromCacheArgs() *AacServiceClearUserAttributesFromCacheArgs {
	return &AacServiceClearUserAttributesFromCacheArgs{}
}

func (p *AacServiceClearUserAttributesFromCacheArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceClearUserAttributesFromCacheArgs) GetTokenType() string {
	return p.TokenType
}
func (p *AacServiceClearUserAttributesFromCacheArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearUserAttributesFromCache_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceClearUserAttributesFromCacheArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceClearUserAttributesFromCacheArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceClearUserAttributesFromCacheArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type AacServiceClearUserAttributesFromCacheResult struct {
	Success *ClearUserAttributesResponse `thrift:"success,0" json:"success,omitempty"`
	Ex1     *SecurityServiceException    `thrift:"ex1,1" json:"ex1,omitempty"`
}

func NewAacServiceClearUserAttributesFromCacheResult() *AacServiceClearUserAttributesFromCacheResult {
	return &AacServiceClearUserAttributesFromCacheResult{}
}

var AacServiceClearUserAttributesFromCacheResult_Success_DEFAULT *ClearUserAttributesResponse

func (p *AacServiceClearUserAttributesFromCacheResult) GetSuccess() *ClearUserAttributesResponse {
	if !p.IsSetSuccess() {
		return AacServiceClearUserAttributesFromCacheResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceClearUserAttributesFromCacheResult_Ex1_DEFAULT *SecurityServiceException

func (p *AacServiceClearUserAttributesFromCacheResult) GetEx1() *SecurityServiceException {
	if !p.IsSetEx1() {
		return AacServiceClearUserAttributesFromCacheResult_Ex1_DEFAULT
	}
	return p.Ex1
}
func (p *AacServiceClearUserAttributesFromCacheResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceClearUserAttributesFromCacheResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceClearUserAttributesFromCacheResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ClearUserAttributesResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &SecurityServiceException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearUserAttributesFromCache_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceClearUserAttributesFromCacheResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceClearUserAttributesFromCacheResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceClearUserAttributesFromCacheResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceClearUserAttributesFromCacheResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TokenType
//  - SnippetType
type AacServiceGetSnippetsArgs struct {
	UserToken   string `thrift:"userToken,1" json:"userToken"`
	TokenType   string `thrift:"tokenType,2" json:"tokenType"`
	SnippetType string `thrift:"snippetType,3" json:"snippetType"`
}

func NewAacServiceGetSnippetsArgs() *AacServiceGetSnippetsArgs {
	return &AacServiceGetSnippetsArgs{}
}

func (p *AacServiceGetSnippetsArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceGetSnippetsArgs) GetTokenType() string {
	return p.TokenType
}

func (p *AacServiceGetSnippetsArgs) GetSnippetType() string {
	return p.SnippetType
}
func (p *AacServiceGetSnippetsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceGetSnippetsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceGetSnippetsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceGetSnippetsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SnippetType = v
	}
	return nil
}

func (p *AacServiceGetSnippetsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSnippets_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceGetSnippetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceGetSnippetsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceGetSnippetsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snippetType", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snippetType: ", p), err)
	}
	if err := oprot.WriteString(string(p.SnippetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snippetType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snippetType: ", p), err)
	}
	return err
}

func (p *AacServiceGetSnippetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceGetSnippetsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type AacServiceGetSnippetsResult struct {
	Success *SnippetResponse          `thrift:"success,0" json:"success,omitempty"`
	Ex1     *SecurityServiceException `thrift:"ex1,1" json:"ex1,omitempty"`
}

func NewAacServiceGetSnippetsResult() *AacServiceGetSnippetsResult {
	return &AacServiceGetSnippetsResult{}
}

var AacServiceGetSnippetsResult_Success_DEFAULT *SnippetResponse

func (p *AacServiceGetSnippetsResult) GetSuccess() *SnippetResponse {
	if !p.IsSetSuccess() {
		return AacServiceGetSnippetsResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceGetSnippetsResult_Ex1_DEFAULT *SecurityServiceException

func (p *AacServiceGetSnippetsResult) GetEx1() *SecurityServiceException {
	if !p.IsSetEx1() {
		return AacServiceGetSnippetsResult_Ex1_DEFAULT
	}
	return p.Ex1
}
func (p *AacServiceGetSnippetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceGetSnippetsResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceGetSnippetsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceGetSnippetsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SnippetResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceGetSnippetsResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &SecurityServiceException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceGetSnippetsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSnippets_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceGetSnippetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceGetSnippetsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceGetSnippetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceGetSnippetsResult(%+v)", *p)
}

// Attributes:
//  - UserToken
//  - TokenType
//  - ShareType
//  - Share
type AacServiceGetShareArgs struct {
	UserToken string `thrift:"userToken,1" json:"userToken"`
	TokenType string `thrift:"tokenType,2" json:"tokenType"`
	ShareType string `thrift:"shareType,3" json:"shareType"`
	Share     string `thrift:"share,4" json:"share"`
}

func NewAacServiceGetShareArgs() *AacServiceGetShareArgs {
	return &AacServiceGetShareArgs{}
}

func (p *AacServiceGetShareArgs) GetUserToken() string {
	return p.UserToken
}

func (p *AacServiceGetShareArgs) GetTokenType() string {
	return p.TokenType
}

func (p *AacServiceGetShareArgs) GetShareType() string {
	return p.ShareType
}

func (p *AacServiceGetShareArgs) GetShare() string {
	return p.Share
}
func (p *AacServiceGetShareArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceGetShareArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserToken = v
	}
	return nil
}

func (p *AacServiceGetShareArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TokenType = v
	}
	return nil
}

func (p *AacServiceGetShareArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShareType = v
	}
	return nil
}

func (p *AacServiceGetShareArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *AacServiceGetShareArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getShare_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceGetShareArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userToken: ", p), err)
	}
	return err
}

func (p *AacServiceGetShareArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenType", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenType: ", p), err)
	}
	if err := oprot.WriteString(string(p.TokenType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenType: ", p), err)
	}
	return err
}

func (p *AacServiceGetShareArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareType", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:shareType: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShareType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:shareType: ", p), err)
	}
	return err
}

func (p *AacServiceGetShareArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:share: ", p), err)
	}
	return err
}

func (p *AacServiceGetShareArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceGetShareArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type AacServiceGetShareResult struct {
	Success *ShareResponse            `thrift:"success,0" json:"success,omitempty"`
	Ex1     *SecurityServiceException `thrift:"ex1,1" json:"ex1,omitempty"`
}

func NewAacServiceGetShareResult() *AacServiceGetShareResult {
	return &AacServiceGetShareResult{}
}

var AacServiceGetShareResult_Success_DEFAULT *ShareResponse

func (p *AacServiceGetShareResult) GetSuccess() *ShareResponse {
	if !p.IsSetSuccess() {
		return AacServiceGetShareResult_Success_DEFAULT
	}
	return p.Success
}

var AacServiceGetShareResult_Ex1_DEFAULT *SecurityServiceException

func (p *AacServiceGetShareResult) GetEx1() *SecurityServiceException {
	if !p.IsSetEx1() {
		return AacServiceGetShareResult_Ex1_DEFAULT
	}
	return p.Ex1
}
func (p *AacServiceGetShareResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AacServiceGetShareResult) IsSetEx1() bool {
	return p.Ex1 != nil
}

func (p *AacServiceGetShareResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AacServiceGetShareResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ShareResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AacServiceGetShareResult) readField1(iprot thrift.TProtocol) error {
	p.Ex1 = &SecurityServiceException{}
	if err := p.Ex1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
	}
	return nil
}

func (p *AacServiceGetShareResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getShare_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AacServiceGetShareResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AacServiceGetShareResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx1() {
		if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err)
		}
		if err := p.Ex1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err)
		}
	}
	return err
}

func (p *AacServiceGetShareResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AacServiceGetShareResult(%+v)", *p)
}
