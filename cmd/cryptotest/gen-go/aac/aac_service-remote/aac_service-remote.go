// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"decipher.com/oduploader/cmd/cryptotest/gen-go/aac"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  AcmResponse buildAcm( byteList, string dataType,  propertiesMap)")
	fmt.Fprintln(os.Stderr, "  ValidateAcmsResponse validateAcms( acmInfoList, string userToken, string tokenType, string shareType, string share, bool rollup, bool populate)")
	fmt.Fprintln(os.Stderr, "  AcmResponse validateAcm(string acm)")
	fmt.Fprintln(os.Stderr, "  AcmResponse populateAndValidateAcm(string acm)")
	fmt.Fprintln(os.Stderr, "  AcmResponse populateAndValidateAcmFromCapcoString(string capcoString, string capcoStringTypes)")
	fmt.Fprintln(os.Stderr, "  ValidateTrigraphResponse isCountryTrigraph(string trigraph)")
	fmt.Fprintln(os.Stderr, "  AcmResponse createAcmFromBannerMarking(string banner, string shareType, string share)")
	fmt.Fprintln(os.Stderr, "  AcmResponse rollupAcms(string userToken,  acmList, string shareType, string share)")
	fmt.Fprintln(os.Stderr, "  CheckAccessResponse checkAccess(string userToken, string tokenType, string acm)")
	fmt.Fprintln(os.Stderr, "  CheckAccessAndPopulateResponse checkAccessAndPopulate(string userToken, string tokenType,  acmInfoList, bool calculateRollup, string shareType, string share)")
	fmt.Fprintln(os.Stderr, "  UserAttributesResponse getUserAttributes(string userToken, string tokenType, string snippetType)")
	fmt.Fprintln(os.Stderr, "  ClearUserAttributesResponse clearUserAttributesFromCache(string userToken, string tokenType)")
	fmt.Fprintln(os.Stderr, "  SnippetResponse getSnippets(string userToken, string tokenType, string snippetType)")
	fmt.Fprintln(os.Stderr, "  ShareResponse getShare(string userToken, string tokenType, string shareType, string share)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := aac.NewAacServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "buildAcm":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "BuildAcm requires 3 args")
			flag.Usage()
		}
		arg48 := flag.Arg(1)
		mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
		defer mbTrans49.Close()
		_, err50 := mbTrans49.WriteString(arg48)
		if err50 != nil {
			Usage()
			return
		}
		factory51 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt52 := factory51.GetProtocol(mbTrans49)
		containerStruct0 := aac.NewAacServiceBuildAcmArgs()
		err53 := containerStruct0.ReadField1(jsProt52)
		if err53 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ByteList
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg55 := flag.Arg(3)
		mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
		defer mbTrans56.Close()
		_, err57 := mbTrans56.WriteString(arg55)
		if err57 != nil {
			Usage()
			return
		}
		factory58 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt59 := factory58.GetProtocol(mbTrans56)
		containerStruct2 := aac.NewAacServiceBuildAcmArgs()
		err60 := containerStruct2.ReadField3(jsProt59)
		if err60 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PropertiesMap
		value2 := argvalue2
		fmt.Print(client.BuildAcm(value0, value1, value2))
		fmt.Print("\n")
		break
	case "validateAcms":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "ValidateAcms requires 7 args")
			flag.Usage()
		}
		arg61 := flag.Arg(1)
		mbTrans62 := thrift.NewTMemoryBufferLen(len(arg61))
		defer mbTrans62.Close()
		_, err63 := mbTrans62.WriteString(arg61)
		if err63 != nil {
			Usage()
			return
		}
		factory64 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt65 := factory64.GetProtocol(mbTrans62)
		containerStruct0 := aac.NewAacServiceValidateAcmsArgs()
		err66 := containerStruct0.ReadField1(jsProt65)
		if err66 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.AcmInfoList
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		argvalue6 := flag.Arg(7) == "true"
		value6 := argvalue6
		fmt.Print(client.ValidateAcms(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "validateAcm":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateAcm requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ValidateAcm(value0))
		fmt.Print("\n")
		break
	case "populateAndValidateAcm":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PopulateAndValidateAcm requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PopulateAndValidateAcm(value0))
		fmt.Print("\n")
		break
	case "populateAndValidateAcmFromCapcoString":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PopulateAndValidateAcmFromCapcoString requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.PopulateAndValidateAcmFromCapcoString(value0, value1))
		fmt.Print("\n")
		break
	case "isCountryTrigraph":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsCountryTrigraph requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.IsCountryTrigraph(value0))
		fmt.Print("\n")
		break
	case "createAcmFromBannerMarking":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateAcmFromBannerMarking requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.CreateAcmFromBannerMarking(value0, value1, value2))
		fmt.Print("\n")
		break
	case "rollupAcms":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RollupAcms requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg82 := flag.Arg(2)
		mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
		defer mbTrans83.Close()
		_, err84 := mbTrans83.WriteString(arg82)
		if err84 != nil {
			Usage()
			return
		}
		factory85 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt86 := factory85.GetProtocol(mbTrans83)
		containerStruct1 := aac.NewAacServiceRollupAcmsArgs()
		err87 := containerStruct1.ReadField2(jsProt86)
		if err87 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.AcmList
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.RollupAcms(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "checkAccess":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CheckAccess requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.CheckAccess(value0, value1, value2))
		fmt.Print("\n")
		break
	case "checkAccessAndPopulate":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "CheckAccessAndPopulate requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg95 := flag.Arg(3)
		mbTrans96 := thrift.NewTMemoryBufferLen(len(arg95))
		defer mbTrans96.Close()
		_, err97 := mbTrans96.WriteString(arg95)
		if err97 != nil {
			Usage()
			return
		}
		factory98 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt99 := factory98.GetProtocol(mbTrans96)
		containerStruct2 := aac.NewAacServiceCheckAccessAndPopulateArgs()
		err100 := containerStruct2.ReadField3(jsProt99)
		if err100 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.AcmInfoList
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.CheckAccessAndPopulate(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getUserAttributes":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetUserAttributes requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetUserAttributes(value0, value1, value2))
		fmt.Print("\n")
		break
	case "clearUserAttributesFromCache":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ClearUserAttributesFromCache requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ClearUserAttributesFromCache(value0, value1))
		fmt.Print("\n")
		break
	case "getSnippets":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSnippets requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetSnippets(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getShare":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetShare requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetShare(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
