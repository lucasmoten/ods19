// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// ACM object optionally identified by a path
//
// @param path. Path of the ACM in the source system. This is optional
// @param acm. JSON representation of ACM
// @param includeInRollup. If true, this ACM will be included in the rollup
//
// Attributes:
//  - Path
//  - Acm
//  - IncludeInRollup
type AcmInfo struct {
	Path            string `thrift:"path,1" json:"path"`
	Acm             string `thrift:"acm,2" json:"acm"`
	IncludeInRollup bool   `thrift:"includeInRollup,3" json:"includeInRollup"`
}

func NewAcmInfo() *AcmInfo {
	return &AcmInfo{}
}

func (p *AcmInfo) GetPath() string {
	return p.Path
}

func (p *AcmInfo) GetAcm() string {
	return p.Acm
}

func (p *AcmInfo) GetIncludeInRollup() bool {
	return p.IncludeInRollup
}
func (p *AcmInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcmInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *AcmInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Acm = v
	}
	return nil
}

func (p *AcmInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IncludeInRollup = v
	}
	return nil
}

func (p *AcmInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcmInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcmInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *AcmInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acm", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:acm: ", p), err)
	}
	if err := oprot.WriteString(string(p.Acm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acm (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:acm: ", p), err)
	}
	return err
}

func (p *AcmInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("includeInRollup", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:includeInRollup: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IncludeInRollup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.includeInRollup (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:includeInRollup: ", p), err)
	}
	return err
}

func (p *AcmInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcmInfo(%+v)", *p)
}

// Response for acm rollup with path
//
// @param acmInfo.
// @param path.
//
// Attributes:
//  - AcmInfo
//  - Path
type AcmsForRollupWithPath struct {
	AcmInfo *AcmInfo `thrift:"acmInfo,1" json:"acmInfo"`
	Path    string   `thrift:"path,2" json:"path"`
}

func NewAcmsForRollupWithPath() *AcmsForRollupWithPath {
	return &AcmsForRollupWithPath{}
}

var AcmsForRollupWithPath_AcmInfo_DEFAULT *AcmInfo

func (p *AcmsForRollupWithPath) GetAcmInfo() *AcmInfo {
	if !p.IsSetAcmInfo() {
		return AcmsForRollupWithPath_AcmInfo_DEFAULT
	}
	return p.AcmInfo
}

func (p *AcmsForRollupWithPath) GetPath() string {
	return p.Path
}
func (p *AcmsForRollupWithPath) IsSetAcmInfo() bool {
	return p.AcmInfo != nil
}

func (p *AcmsForRollupWithPath) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcmsForRollupWithPath) readField1(iprot thrift.TProtocol) error {
	p.AcmInfo = &AcmInfo{}
	if err := p.AcmInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AcmInfo), err)
	}
	return nil
}

func (p *AcmsForRollupWithPath) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *AcmsForRollupWithPath) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcmsForRollupWithPath"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcmsForRollupWithPath) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acmInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acmInfo: ", p), err)
	}
	if err := p.AcmInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AcmInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acmInfo: ", p), err)
	}
	return err
}

func (p *AcmsForRollupWithPath) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err)
	}
	return err
}

func (p *AcmsForRollupWithPath) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcmsForRollupWithPath(%+v)", *p)
}

// ACM status object. acmString is populated by the methods which return an ACM on
// success
//
// @param success. True if request was successfully processed, otherwise false
// @param messages. List of error/warning messages
// @param acmValid. True if ACM in the request is valid
// @param hasAccess. True, if the user has access to the ACM
// @param AcmInfo. ACM info
//
// Attributes:
//  - Success
//  - Messages
//  - AcmValid
//  - HasAccess
//  - AcmInfo
type AcmResponse struct {
	Success   bool     `thrift:"success,1" json:"success"`
	Messages  []string `thrift:"messages,2" json:"messages"`
	AcmValid  bool     `thrift:"acmValid,3" json:"acmValid"`
	HasAccess bool     `thrift:"hasAccess,4" json:"hasAccess"`
	AcmInfo   *AcmInfo `thrift:"acmInfo,5" json:"acmInfo"`
}

func NewAcmResponse() *AcmResponse {
	return &AcmResponse{}
}

func (p *AcmResponse) GetSuccess() bool {
	return p.Success
}

func (p *AcmResponse) GetMessages() []string {
	return p.Messages
}

func (p *AcmResponse) GetAcmValid() bool {
	return p.AcmValid
}

func (p *AcmResponse) GetHasAccess() bool {
	return p.HasAccess
}

var AcmResponse_AcmInfo_DEFAULT *AcmInfo

func (p *AcmResponse) GetAcmInfo() *AcmInfo {
	if !p.IsSetAcmInfo() {
		return AcmResponse_AcmInfo_DEFAULT
	}
	return p.AcmInfo
}
func (p *AcmResponse) IsSetAcmInfo() bool {
	return p.AcmInfo != nil
}

func (p *AcmResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcmResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *AcmResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Messages = append(p.Messages, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AcmResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AcmValid = v
	}
	return nil
}

func (p *AcmResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HasAccess = v
	}
	return nil
}

func (p *AcmResponse) readField5(iprot thrift.TProtocol) error {
	p.AcmInfo = &AcmInfo{}
	if err := p.AcmInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AcmInfo), err)
	}
	return nil
}

func (p *AcmResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AcmResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcmResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *AcmResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *AcmResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acmValid", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:acmValid: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.AcmValid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acmValid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:acmValid: ", p), err)
	}
	return err
}

func (p *AcmResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasAccess", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hasAccess: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasAccess)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasAccess (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hasAccess: ", p), err)
	}
	return err
}

func (p *AcmResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acmInfo", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:acmInfo: ", p), err)
	}
	if err := p.AcmInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AcmInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:acmInfo: ", p), err)
	}
	return err
}

func (p *AcmResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcmResponse(%+v)", *p)
}

// Check access status object.
//
// @param success. True if request was successfully processed, otherwise false
// @param messages. List of error/warning messages
// @param hasAccess. True if user attributes have access to ACM
//
// Attributes:
//  - Success
//  - Messages
//  - HasAccess
type CheckAccessResponse struct {
	Success   bool     `thrift:"success,1" json:"success"`
	Messages  []string `thrift:"messages,2" json:"messages"`
	HasAccess bool     `thrift:"hasAccess,3" json:"hasAccess"`
}

func NewCheckAccessResponse() *CheckAccessResponse {
	return &CheckAccessResponse{}
}

func (p *CheckAccessResponse) GetSuccess() bool {
	return p.Success
}

func (p *CheckAccessResponse) GetMessages() []string {
	return p.Messages
}

func (p *CheckAccessResponse) GetHasAccess() bool {
	return p.HasAccess
}
func (p *CheckAccessResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckAccessResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckAccessResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Messages = append(p.Messages, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CheckAccessResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.HasAccess = v
	}
	return nil
}

func (p *CheckAccessResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckAccessResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckAccessResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *CheckAccessResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *CheckAccessResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasAccess", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hasAccess: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasAccess)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasAccess (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hasAccess: ", p), err)
	}
	return err
}

func (p *CheckAccessResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckAccessResponse(%+v)", *p)
}

// Reject access response object.
//
// @param messages. List of error/warning messages
// @param hasAccess. True if user attributes have access to ACM
//
// Attributes:
//  - Messages
//  - HasAccess
type RejectAccessResponse struct {
	Messages  []string `thrift:"messages,1" json:"messages"`
	HasAccess bool     `thrift:"hasAccess,2" json:"hasAccess"`
}

func NewRejectAccessResponse() *RejectAccessResponse {
	return &RejectAccessResponse{}
}

func (p *RejectAccessResponse) GetMessages() []string {
	return p.Messages
}

func (p *RejectAccessResponse) GetHasAccess() bool {
	return p.HasAccess
}
func (p *RejectAccessResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RejectAccessResponse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Messages = append(p.Messages, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RejectAccessResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HasAccess = v
	}
	return nil
}

func (p *RejectAccessResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RejectAccessResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RejectAccessResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messages: ", p), err)
	}
	return err
}

func (p *RejectAccessResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasAccess", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasAccess: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasAccess)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasAccess (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasAccess: ", p), err)
	}
	return err
}

func (p *RejectAccessResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectAccessResponse(%+v)", *p)
}

// Retrieve/populate user attributes response object
//
// @param success. True if request was successfully processed, otherwise false
// @param messages. List of error/warning messages
// @param userAttributesString. JSON representation of output user attributes
//
// Attributes:
//  - Success
//  - Messages
//  - UserAttributes
type UserAttributesResponse struct {
	Success        bool     `thrift:"success,1" json:"success"`
	Messages       []string `thrift:"messages,2" json:"messages"`
	UserAttributes string   `thrift:"userAttributes,3" json:"userAttributes"`
}

func NewUserAttributesResponse() *UserAttributesResponse {
	return &UserAttributesResponse{}
}

func (p *UserAttributesResponse) GetSuccess() bool {
	return p.Success
}

func (p *UserAttributesResponse) GetMessages() []string {
	return p.Messages
}

func (p *UserAttributesResponse) GetUserAttributes() string {
	return p.UserAttributes
}
func (p *UserAttributesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAttributesResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *UserAttributesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.Messages = append(p.Messages, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserAttributesResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserAttributes = v
	}
	return nil
}

func (p *UserAttributesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAttributesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAttributesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *UserAttributesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *UserAttributesResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userAttributes", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userAttributes: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserAttributes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userAttributes (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userAttributes: ", p), err)
	}
	return err
}

func (p *UserAttributesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAttributesResponse(%+v)", *p)
}

// Clear user attributes response object
//
// @param success. True if request was successfully processed, otherwise false
// @param messages. List of error/warning messages
//
// Attributes:
//  - Success
//  - Messages
type ClearUserAttributesResponse struct {
	Success  bool     `thrift:"success,1" json:"success"`
	Messages []string `thrift:"messages,2" json:"messages"`
}

func NewClearUserAttributesResponse() *ClearUserAttributesResponse {
	return &ClearUserAttributesResponse{}
}

func (p *ClearUserAttributesResponse) GetSuccess() bool {
	return p.Success
}

func (p *ClearUserAttributesResponse) GetMessages() []string {
	return p.Messages
}
func (p *ClearUserAttributesResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClearUserAttributesResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ClearUserAttributesResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.Messages = append(p.Messages, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClearUserAttributesResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClearUserAttributesResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClearUserAttributesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *ClearUserAttributesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *ClearUserAttributesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearUserAttributesResponse(%+v)", *p)
}

// Get snippet response object
//
// @param success. True if request was successfully processed, otherwise false
// @param messages. List of error/warning messages
// @param snippets. Snippets in JSON form keyed by the snippet name.
//
// Attributes:
//  - Success
//  - Messages
//  - Snippets
type SnippetResponse struct {
	Success  bool     `thrift:"success,1" json:"success"`
	Messages []string `thrift:"messages,2" json:"messages"`
	Snippets string   `thrift:"snippets,3" json:"snippets"`
}

func NewSnippetResponse() *SnippetResponse {
	return &SnippetResponse{}
}

func (p *SnippetResponse) GetSuccess() bool {
	return p.Success
}

func (p *SnippetResponse) GetMessages() []string {
	return p.Messages
}

func (p *SnippetResponse) GetSnippets() string {
	return p.Snippets
}
func (p *SnippetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SnippetResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *SnippetResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.Messages = append(p.Messages, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SnippetResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Snippets = v
	}
	return nil
}

func (p *SnippetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SnippetResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SnippetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *SnippetResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *SnippetResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("snippets", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snippets: ", p), err)
	}
	if err := oprot.WriteString(string(p.Snippets)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snippets (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snippets: ", p), err)
	}
	return err
}

func (p *SnippetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SnippetResponse(%+v)", *p)
}

// Get share response object
//
// @param success. True if request was successfully processed, otherwise false
// @param messages. List of error/warning messages
// @param share. JSON representation of the share object
//
// Attributes:
//  - Success
//  - Messages
//  - Share
type ShareResponse struct {
	Success  bool     `thrift:"success,1" json:"success"`
	Messages []string `thrift:"messages,2" json:"messages"`
	Share    string   `thrift:"share,3" json:"share"`
}

func NewShareResponse() *ShareResponse {
	return &ShareResponse{}
}

func (p *ShareResponse) GetSuccess() bool {
	return p.Success
}

func (p *ShareResponse) GetMessages() []string {
	return p.Messages
}

func (p *ShareResponse) GetShare() string {
	return p.Share
}
func (p *ShareResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShareResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ShareResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.Messages = append(p.Messages, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShareResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Share = v
	}
	return nil
}

func (p *ShareResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShareResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *ShareResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *ShareResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("share", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:share: ", p), err)
	}
	if err := oprot.WriteString(string(p.Share)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.share (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:share: ", p), err)
	}
	return err
}

func (p *ShareResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareResponse(%+v)", *p)
}

// Response object for checkAccessAndPopulate.
//
//  @param  AcmResponseList.  List of ACM status objects
//  @param  acmRollup.  Rollup of all ACM objects
//
// Attributes:
//  - Success
//  - Messages
//  - AcmResponseList
//  - RollupAcmResponse
type CheckAccessAndPopulateResponse struct {
	Success           bool           `thrift:"success,1" json:"success"`
	Messages          []string       `thrift:"messages,2" json:"messages"`
	AcmResponseList   []*AcmResponse `thrift:"AcmResponseList,3" json:"AcmResponseList"`
	RollupAcmResponse *AcmResponse   `thrift:"rollupAcmResponse,4" json:"rollupAcmResponse"`
}

func NewCheckAccessAndPopulateResponse() *CheckAccessAndPopulateResponse {
	return &CheckAccessAndPopulateResponse{}
}

func (p *CheckAccessAndPopulateResponse) GetSuccess() bool {
	return p.Success
}

func (p *CheckAccessAndPopulateResponse) GetMessages() []string {
	return p.Messages
}

func (p *CheckAccessAndPopulateResponse) GetAcmResponseList() []*AcmResponse {
	return p.AcmResponseList
}

var CheckAccessAndPopulateResponse_RollupAcmResponse_DEFAULT *AcmResponse

func (p *CheckAccessAndPopulateResponse) GetRollupAcmResponse() *AcmResponse {
	if !p.IsSetRollupAcmResponse() {
		return CheckAccessAndPopulateResponse_RollupAcmResponse_DEFAULT
	}
	return p.RollupAcmResponse
}
func (p *CheckAccessAndPopulateResponse) IsSetRollupAcmResponse() bool {
	return p.RollupAcmResponse != nil
}

func (p *CheckAccessAndPopulateResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckAccessAndPopulateResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *CheckAccessAndPopulateResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.Messages = append(p.Messages, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CheckAccessAndPopulateResponse) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AcmResponse, 0, size)
	p.AcmResponseList = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &AcmResponse{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.AcmResponseList = append(p.AcmResponseList, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CheckAccessAndPopulateResponse) readField4(iprot thrift.TProtocol) error {
	p.RollupAcmResponse = &AcmResponse{}
	if err := p.RollupAcmResponse.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RollupAcmResponse), err)
	}
	return nil
}

func (p *CheckAccessAndPopulateResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckAccessAndPopulateResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckAccessAndPopulateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *CheckAccessAndPopulateResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *CheckAccessAndPopulateResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AcmResponseList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:AcmResponseList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AcmResponseList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AcmResponseList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:AcmResponseList: ", p), err)
	}
	return err
}

func (p *CheckAccessAndPopulateResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rollupAcmResponse", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rollupAcmResponse: ", p), err)
	}
	if err := p.RollupAcmResponse.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RollupAcmResponse), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rollupAcmResponse: ", p), err)
	}
	return err
}

func (p *CheckAccessAndPopulateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckAccessAndPopulateResponse(%+v)", *p)
}

// Attributes:
//  - Success
//  - Messages
//  - AcmResponseList
//  - RollupAcmResponse
type ValidateAcmsResponse struct {
	Success           bool           `thrift:"success,1" json:"success"`
	Messages          []string       `thrift:"messages,2" json:"messages"`
	AcmResponseList   []*AcmResponse `thrift:"AcmResponseList,3" json:"AcmResponseList"`
	RollupAcmResponse *AcmResponse   `thrift:"rollupAcmResponse,4" json:"rollupAcmResponse"`
}

func NewValidateAcmsResponse() *ValidateAcmsResponse {
	return &ValidateAcmsResponse{}
}

func (p *ValidateAcmsResponse) GetSuccess() bool {
	return p.Success
}

func (p *ValidateAcmsResponse) GetMessages() []string {
	return p.Messages
}

func (p *ValidateAcmsResponse) GetAcmResponseList() []*AcmResponse {
	return p.AcmResponseList
}

var ValidateAcmsResponse_RollupAcmResponse_DEFAULT *AcmResponse

func (p *ValidateAcmsResponse) GetRollupAcmResponse() *AcmResponse {
	if !p.IsSetRollupAcmResponse() {
		return ValidateAcmsResponse_RollupAcmResponse_DEFAULT
	}
	return p.RollupAcmResponse
}
func (p *ValidateAcmsResponse) IsSetRollupAcmResponse() bool {
	return p.RollupAcmResponse != nil
}

func (p *ValidateAcmsResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidateAcmsResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ValidateAcmsResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Messages = append(p.Messages, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ValidateAcmsResponse) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AcmResponse, 0, size)
	p.AcmResponseList = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &AcmResponse{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.AcmResponseList = append(p.AcmResponseList, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ValidateAcmsResponse) readField4(iprot thrift.TProtocol) error {
	p.RollupAcmResponse = &AcmResponse{}
	if err := p.RollupAcmResponse.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RollupAcmResponse), err)
	}
	return nil
}

func (p *ValidateAcmsResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ValidateAcmsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidateAcmsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *ValidateAcmsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err)
	}
	return err
}

func (p *ValidateAcmsResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("AcmResponseList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:AcmResponseList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AcmResponseList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AcmResponseList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:AcmResponseList: ", p), err)
	}
	return err
}

func (p *ValidateAcmsResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rollupAcmResponse", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rollupAcmResponse: ", p), err)
	}
	if err := p.RollupAcmResponse.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RollupAcmResponse), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rollupAcmResponse: ", p), err)
	}
	return err
}

func (p *ValidateAcmsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateAcmsResponse(%+v)", *p)
}

// Attributes:
//  - Messages
//  - BodyWithValidatedAcms
type SimpleAcmResponse struct {
	Messages              []string `thrift:"messages,1" json:"messages"`
	BodyWithValidatedAcms string   `thrift:"bodyWithValidatedAcms,2" json:"bodyWithValidatedAcms"`
}

func NewSimpleAcmResponse() *SimpleAcmResponse {
	return &SimpleAcmResponse{}
}

func (p *SimpleAcmResponse) GetMessages() []string {
	return p.Messages
}

func (p *SimpleAcmResponse) GetBodyWithValidatedAcms() string {
	return p.BodyWithValidatedAcms
}
func (p *SimpleAcmResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SimpleAcmResponse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Messages = tSlice
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.Messages = append(p.Messages, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SimpleAcmResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BodyWithValidatedAcms = v
	}
	return nil
}

func (p *SimpleAcmResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SimpleAcmResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SimpleAcmResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messages", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messages: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Messages)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Messages {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messages: ", p), err)
	}
	return err
}

func (p *SimpleAcmResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bodyWithValidatedAcms", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bodyWithValidatedAcms: ", p), err)
	}
	if err := oprot.WriteString(string(p.BodyWithValidatedAcms)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bodyWithValidatedAcms (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bodyWithValidatedAcms: ", p), err)
	}
	return err
}

func (p *SimpleAcmResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SimpleAcmResponse(%+v)", *p)
}

// Attributes:
//  - Success
//  - TrigraphValid
type ValidateTrigraphResponse struct {
	Success       bool `thrift:"success,1" json:"success"`
	TrigraphValid bool `thrift:"trigraphValid,2" json:"trigraphValid"`
}

func NewValidateTrigraphResponse() *ValidateTrigraphResponse {
	return &ValidateTrigraphResponse{}
}

func (p *ValidateTrigraphResponse) GetSuccess() bool {
	return p.Success
}

func (p *ValidateTrigraphResponse) GetTrigraphValid() bool {
	return p.TrigraphValid
}
func (p *ValidateTrigraphResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ValidateTrigraphResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *ValidateTrigraphResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TrigraphValid = v
	}
	return nil
}

func (p *ValidateTrigraphResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ValidateTrigraphResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ValidateTrigraphResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Success)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err)
	}
	return err
}

func (p *ValidateTrigraphResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trigraphValid", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trigraphValid: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.TrigraphValid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.trigraphValid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trigraphValid: ", p), err)
	}
	return err
}

func (p *ValidateTrigraphResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateTrigraphResponse(%+v)", *p)
}

// Invalid input
//
// Attributes:
//  - Message
type InvalidInputException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidInputException() *InvalidInputException {
	return &InvalidInputException{}
}

func (p *InvalidInputException) GetMessage() string {
	return p.Message
}
func (p *InvalidInputException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidInputException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidInputException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidInputException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidInputException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InvalidInputException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidInputException(%+v)", *p)
}

func (p *InvalidInputException) Error() string {
	return p.String()
}

// catch all exception
//
// Attributes:
//  - Message
type SecurityServiceException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewSecurityServiceException() *SecurityServiceException {
	return &SecurityServiceException{}
}

func (p *SecurityServiceException) GetMessage() string {
	return p.Message
}
func (p *SecurityServiceException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecurityServiceException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SecurityServiceException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SecurityServiceException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecurityServiceException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *SecurityServiceException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceException(%+v)", *p)
}

func (p *SecurityServiceException) Error() string {
	return p.String()
}
