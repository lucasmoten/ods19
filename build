#!/usr/bin/env python
import os
import sys
import logging
import subprocess

# This can be made to log to a file.
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
log = logging.getLogger('BUILD')

GOPATH = os.getenv('GOPATH')
PROJECT_ROOT = os.path.join(GOPATH, 'src', 'decipher.com', 'object-drive-server')


def compile_docs():
    docs_dir = os.path.join(PROJECT_ROOT, 'docs')
    os.chdir(docs_dir)
    try:
        subprocess.check_call(['./build'])
    except subprocess.CalledProcessError as e:
        log.error('Error compiling documentation: {0}')


def go_get_libs():
    os.chdir(PROJECT_ROOT)
    try:
        log.info('Running `go get` from {0}'.format(os.path.abspath(os.curdir)))
        subprocess.check_call(['go', 'get', './...', ])
    except subprocess.CalledProcessError as e:
        log.error('Error from command {0}: {1}'.format(e.cmd, str(e)))


def update_thrift_lib():
    repository = 'github.com/samuel/go-thrift/generator'
    try:
        subprocess.check_call(['go', 'get', '-u', repository])
    except subprocess.CalledProcessError:
        log.error('Could not get repository %s' % repository)


def build_all_binaries():
    binary_root = os.path.join(PROJECT_ROOT, 'cmd')
    # Binaries are identified as a sub-directory of PROJECT_ROOT/cmd
    binary_dirs = os.listdir(binary_root)
    # Ignore these directories
    bad_dirs = ['.DS_Store']
    binary_dirs = filter(lambda x: x not in bad_dirs, binary_dirs)
    for bin in binary_dirs:
        try:
            os.chdir(os.path.join(binary_root, bin))
            subprocess.check_call(['go', 'build'])
        except subprocess.CalledProcessError as e:
            log.error('Could not build {0}. Error: {1}'.format(bin, str(e)))
            log.error('Build failed. Continuing...   :( ')


def main():
    compile_docs()
    build_all_binaries()


if __name__ == '__main__':

    try:
        log.info("Starting build.")
        main()
        log.info("Build finished.")

    except Exception:
        sys.exit(1)
