
The following are some notes related to implementing Boring Crypto

https://jira.di2e.net/projects/DIMEODS/issues/DIMEODS-1144?filter=allopenissues

steps taken to install tools if building everything from scratch which follows steps in 
https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp2964.pdf

# ================================================================
# BEGIN SCRIPT

mkdir -p boringcryptotools
cd boringcryptotools

# dependencies
sudo apt-get install cmake xz-utils re2c ninja-build

# clang 4.0.0
wget http://releases.llvm.org/4.0.0/hans-gpg-key.asc
gpg --import hans-gpg-key.asc
wget http://releases.llvm.org/4.0.0/llvm-4.0.0.src.tar.xz
wget http://releases.llvm.org/4.0.0/llvm-4.0.0.src.tar.xz.sig
gpg --verify llvm-4.0.0.src.tar.xz.sig llvm-4.0.0.src.tar.xz
tar -xf llvm-4.0.0.src.tar.xz
mkdir -p llvm-4.0.0.src/tools/clang
wget http://releases.llvm.org/4.0.0/cfe-4.0.0.src.tar.xz
wget http://releases.llvm.org/4.0.0/cfe-4.0.0.src.tar.xz.sig
gpg --verify cfe-4.0.0.src.tar.xz.sig cfe-4.0.0.src.tar.xz
tar -xf cfe-4.0.0.src.tar.xz
mv -t llvm-4.0.0.src/tools/clang cfe-4.0.0.src/*
mv -t llvm-4.0.0.src/tools/clang cfe-4.0.0.src/.*
rm -rf cfe-4.0.0.src
mkdir -p mybuilddir
cd mybuilddir
cmake ../llvm-4.0.0.src
cmake --build .
cd bin
./clang -v
./clang++ -v
cd ..
cd ..

# go dev.boringcrypto.go1.11 
#    (once downloaded, boringcrypto bits built in src/crypto/internal/boring/build/build.sh)
#    this wgets the same boringssl as below and checks the hash
#    however.... the runtime.version ends up being:   
#        devel +2e2a04a605 Mon Sep 24 21:19:42 2018 -0400
#    which is from the commit info. 
#    https://go.googlesource.com/go/+/dev.boringcrypto/ is authoritative for source
#      Within src/misc/boring/build.release is how it packages and publishes to the
#      go-boringcrypto.storage.googleapis.com location
git clone --single-branch -b dev.boringcrypto.go1.11 git@github.com:golang/go.git
cd go/src
./all.bash
which go
go version
cd ../bin 
./go version
cd ..
cd ..

# ninja 1.7.2
wget https://github.com/ninja-build/ninja/archive/v1.7.2.tar.gz
tar -xf v1.7.2.tar.gz
cd ninja-1.7.2
./configure.py --bootstrap
./ninja --version
cp ninja ../mybuilddir/bin
cd ..

# toolchain
cd mybuilddir/bin
#printf "set(CMAKE_C_COMPILER \""`pwd`"/clang\")\nset(CMAKE_CXX_COMPILER \""`pwd`"/clang++\")\nset(CMAKE_MAKE_PROGRAM \""`pwd`"/ninja\")\n" >> ${HOME}/toolchain
printf "set(CMAKE_C_COMPILER \""`pwd`"/clang\")\nset(CMAKE_CXX_COMPILER \""`pwd`"/clang++\")\n" >> ${HOME}/toolchain
chmod +x ${HOME}/toolchain
${HOME}/toolchain
cd ..
cd ..

# boringssl on its own
wget https://commondatastorage.googleapis.com/chromium-boringssl-docs/fips/boringssl-24e5886c0edfc409c8083d10f9f1120111efd6f5.tar.xz
sha256sum boringssl-24e5886c0edfc409c8083d10f9f1120111efd6f5.tar.xz | head -c 64
if [ "$(sha256sum boringssl-24e5886c0edfc409c8083d10f9f1120111efd6f5.tar.xz | head -C 64)" = "15a65d676eeae27618e231183a1ce9804fc9c91bcc3abf5f6ca35216c02bf4da" ]; then
    echo "boringssl sha256sum matched expected value"
else
    echo "ERROR: Hash of boringssl doesnt match expected value"
    exit 1
fi
tar -xf boringssl-24e5886c0edfc409c8083d10f9f1120111efd6f5.tar.xz
cd boringssl
mkdir build && cd build && cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=${HOME}/toolchain -DFIPS=1 -DCMAKE_BUILD_TYPE=Release ..
ninja
ninja run_tests

# EOF
# ================================================================

# ================================================================
# Prebuilt binary of go can (and is) used instead which has proper version set for the runtime
# prebuilt go1.11b4 which Google built and did the release for.
wget https://go-boringcrypto.storage.googleapis.com/go1.11b4.linux-amd64.tar.gz
mkdir -p go1.11b4
tar -xzf go1.11b4.linux-amd64.tar.gz --directory go1.11b4
cd go1.11b4/go/bin
./go version
cd ..
cd ..
cd ..
# ================================================================


**Note**: you must *not* enable `pure` mode, since cgo must be enabled. To
-ensure that binaries are linked with BoringCrypto, you can set `pure = "off"` on
-all relevant `go_binary` rules.
-
-## Caveat
-
-BoringCrypto is used for a given build only in limited circumstances:
-
-  - The build must be GOOS=linux, GOARCH=amd64.
-  - The build must have cgo enabled.
-  - The android build tag must not be specified.
-  - The cmd_go_bootstrap build tag must not be specified.
-
-The version string reported by `runtime.Version` does not indicate that BoringCrypto
-was actually used for the build. For example, linux/386 and non-cgo linux/amd64 binaries
-will report a version of `go1.8.3b2` but not be using BoringCrypto.
-
-To check whether a given binary is using BoringCrypto, run `go tool nm` on it and check
-that it has symbols named `*_Cfunc__goboringcrypto_*`.

#############################
from cmd/odrive..
~/Downloads/boringcryptotools/go/bin/go build
go tool nm odrive | grep "crypto/internal/boring._cgo"

cmd/odrive

before rebuild			    25250498 Sep 19 15:15
built with boringcrypto		29103386 Oct 25 10:30
built with regular 1.10		27091405 Oct 25 10:31

# ================================================================
Updated docker images to use Go 1.11 with and without boring crypto
for the odrive containers, as well as the odriverpm (packaging)

Jenkins will now be set to build with boring crypto
