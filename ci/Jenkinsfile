@Library('service')
import dime.jenkins.Service

def service = new Service(this, env)

node('docker') {

    cleanWs()
    sh 'printenv'
    def saltEnvs = ['aws']
    def serviceName = 'object-drive'
    def serviceVersion = 'x.x'

    def commit_id
    def git_tag
    def version_display
    def version_major
    def version_minor
    def version_patch
    def version_full
    def scmVars
    def projectname = 'object-drive-server'
    def projectpath
    def govgopath
    def use_boring_crypto
    def boring_crypto_version
    def tarroot

    stage('Install Tools') {
        use_boring_crypto = true
        if (use_boring_crypto) {
            boring_crypto_version = "b4"
            // Get these values from https://go.googlesource.com/go/+/dev.boringcrypto/misc/boring/RELEASES
            golang_folder = "/home/jenkins/go-1.12.6b4"
            golang_tar_file = "go1.12.6b4.linux-amd64.tar.gz"
            golang_tar_sum = "eebc2e7f37555760adb361985b861d0cd34f9401cf7456d8d2f2f3082a60eee1"
        } else {
            error("Boring Crypto is required for Go Builds in this environment")
        }
        // This is the secret sauce to setting environment variables within the pipeline
        script {
            env.GOPATH = "${JENKINS_HOME}/workspace/gocode"
            sh "mkdir -p ${GOPATH}/bin"
            sh "mkdir -p ${GOPATH}/src/bitbucket.di2e.net/dime"
            env.PATH = "${GOPATH}/bin:${PATH}"
        }
        projectpath = "/home/jenkins/workspace/gocode/src/bitbucket.di2e.net/dime/${projectname}"
        tarroot = "${projectpath}/tarprep"
        script {
            env.ODRIVE_ROOT = "${projectpath}"
        }
        govgopath = "/home/jenkins/workspace/gocode/src/bitbucket.di2e.net/greymatter/gov-go"
        // Check if go installed already
        if(!fileExists("${golang_folder}/go/bin/")) {
            // Download it
            if (use_boring_crypto) {
                sh "wget -q https://go-boringcrypto.storage.googleapis.com/${golang_tar_file}"
            } else {
                error("Boring Crypto is required for Go Builds in this environment")
            }
            // Check the sha256sum
            actualSum = sh(returnStdout: true, script: "sha256sum ${golang_tar_file}").trim()
            actualSum = actualSum.replace("${golang_tar_file}","").trim()
            // Compare to expected
            if (actualSum != golang_tar_sum) {
                sh "echo Expected Value: ${golang_tar_sum}"
                sh "echo   Actual Value: ${actualSum}"
                error("Actual SHA256SUM of golang download didn't match expected value. Halting")
            } else {
                sh "echo sha256sum validated: ${actualSum}"
            }
            // Installation
            sh "mkdir -p ${golang_folder}"
            sh "tar -C ${golang_folder} -xzf ${golang_tar_file}"
        } else {
            sh "echo Go is already installed"
        }
        script {
            env.PATH = "${golang_folder}/go/bin:$PATH"
        }

        // Check if govendor installed already
        if(!fileExists(JENKINS_HOME + "/workspace/gocode/bin/govendor")) {
            sh "go get -u github.com/kardianos/govendor"
        } else {
            sh "echo govendor is already installed"
        }

        // Check if go-bindata installed already
        if(!fileExists(JENKINS_HOME + "/workspace/gocode/bin/go-bindata")) {
            sh "go get -u github.com/jteeuwen/go-bindata/..."
        } else {
            sh "echo go-bindata is already installed"
        }
    }

    stage('Get Code and Version') {
        // unfortunately have to check out again to get a reference to the scmVars.GIT_COMMIT that
        // actually resulted in this job being kicked off!!!  Its not an environment variable
        // TODO: Determine if there is a way to reference the COMMIT Notification information.
        scmVars = checkout scm

        // copy into the go path so we can build it
        sh "mkdir -p ${projectpath}"
        sh "cd ${JENKINS_HOME}/workspace/gocode/src/bitbucket.di2e.net/dime && rm -rf ${projectname}"
        sh "cp -r ${WORKSPACE} ${JENKINS_HOME}/workspace/gocode/src/bitbucket.di2e.net/dime/"

        // get commit id
        commit_id = scmVars.GIT_COMMIT
        sh "echo ${commit_id}"
        commit_id = sh(returnStdout: true, script: "git rev-parse --short HEAD | head -1").trim()
        sh "echo ${commit_id}"
        // get tag
        git_tag = sh(returnStdout: true, script: "git tag --contains | head -1").trim()
        // build_number save to file
        sh "echo ${BUILD_NUMBER} > ${projectpath}/BUILDNUMBER"
        // get version
        version_display = sh(returnStdout: true, script: "grep -m 1 '## Release' changelog.md | sed -E -e 's/[[:blank:]]+/\\n/g' | grep -m 1 v").trim()
        version_parts = version_display.replace("v","") .split('\\.')
        if (version_parts.size() > 0) {
            version_major = version_parts[0]
            if (version_major.length() == 0) {
                version_major = '0'
            }
        } else {
            version_major = '0'
        }
        if (version_parts.size() > 1) {
            version_minor = version_parts[1]
            if (version_minor.length() == 0) {
                version_minor = '0'
            }
        } else {
            version_minor = '0'
        }
        if (version_parts.size() > 2) {
            version_patch = version_parts[2]
            if (version_patch.length() == 0) {
                version_patch = '0'
            }
        } else {
            version_patch = '0'
        }
        serviceVersion = version_major + "." + version_minor
        version_full = version_major + "." + version_minor + "." + version_patch
        version_display = version_full // effectively remove the prefix 'v' from doc rendering and docker image tags
        if (use_boring_crypto) {
            version_full = version_full + boring_crypto_version
            version_display = version_display + boring_crypto_version
        }
        if (git_tag == "") {
            version_display = version_display + "-release-candidate"
        }
        script {
            env.CIRCLE_BUILD_NUM = "${BUILD_NUMBER}"
            env.CIRCLE_SHA1 = "${commit_id}"
            env.TAG_VERSION = "${git_tag}"
            env.VERSION_DISPLAY = "${version_display}"
        }
    }

    stage('Build') {
        parallel docs: {
            sh "mkdir -p ${projectpath}/server/static/templates"
            sh "cd ${projectpath} && ./makedocs ${version_display} ${BUILD_NUMBER}"
        }, binaries: {
            if (use_boring_crypto) {
                sh "cd ${projectpath}/cmd/odrive && CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags '-X main.Build=${BUILD_NUMBER} -X main.Commit=${commit_id} -X main.Version=${version_full}'"      
                sh "cd ${projectpath}/cmd/obfuscate && CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build"
                sh "cd ${projectpath}/cmd/odrive-database && go-bindata schema migrations ../../defaultcerts/client-mysql/id ../../defaultcerts/client-mysql/trust"
                sh "cd ${projectpath}/cmd/odrive-database && CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags '-X main.Build=${BUILD_NUMBER} -X main.Commit=${commit_id} -X main.Version=${version_full}'"
            } else {
                sh "cd ${projectpath}/cmd/odrive && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags '-X main.Build=${BUILD_NUMBER} -X main.Commit=${commit_id} -X main.Version=${version_full}'"      
                sh "cd ${projectpath}/cmd/obfuscate && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build"
                sh "cd ${projectpath}/cmd/odrive-database && go-bindata schema migrations ../../defaultcerts/client-mysql/id ../../defaultcerts/client-mysql/trust"
                sh "cd ${projectpath}/cmd/odrive-database && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags '-X main.Build=${BUILD_NUMBER} -X main.Commit=${commit_id} -X main.Version=${version_full}'"
            }
        }
    }

    stage('Package and Deployment') {
        parallel docker: {
            // Use ODB to package images. 
            sh "cd ${projectpath} && CGO_ENABLED=1 GOOS=linux GOARCH=amd64 ./odb --build -i deciphernow/odrive-bc -t latest"
            sh "cd ${projectpath} && CGO_ENABLED=1 GOOS=linux GOARCH=amd64 ./odb --build -i deciphernow/metadatadb -t latest"
            // Tag and push images using the dime_svc_acct
            sh "docker tag deciphernow/odrive-bc:latest docker-dime.di2e.net/dime/${serviceName}-server:${version_display}"
            sh "docker tag deciphernow/metadatadb:latest docker-dime.di2e.net/dime/${serviceName}-metadatadb:${version_display}"
            docker.withRegistry('http://docker-dime.di2e.net', 'dime_svc_acct') {
                docker.image('docker-dime.di2e.net/dime/' + serviceName + '-server:' + version_display).push()
                docker.image('docker-dime.di2e.net/dime/' + serviceName + '-metadatadb:' + version_display).push()
            }
        }, rpm: {
            // Make it!
            build_date = sh(returnStdout: true, script: "date +%Y%m%d").trim()
            script {
                env.ODRIVE_BUILDDATE="${build_date}"
            }
            sh "cd ${projectpath} && ./makerpm ${version_full} ${BUILD_NUMBER} ${git_tag}"
            sh "mv ${projectpath}/${serviceName}-${serviceVersion}-${version_full}-${BUILD_NUMBER}.${build_date}.x86_64.rpm ${WORKSPACE}"
            // Archived as job output
            archiveArtifacts artifacts: '*.rpm'
            // To Nexus
            withCredentials([usernamePassword(credentialsId: 'dime_svc_acct', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh "curl -v --user '${USERNAME}:${PASSWORD}' --upload-file ${serviceName}-${serviceVersion}-${version_full}-${BUILD_NUMBER}.${build_date}.x86_64.rpm https://nexus.di2e.net/nexus3/repository/Private_DIME_YUM/${projectname}/${serviceName}-${serviceVersion}-${version_full}-${BUILD_NUMBER}.${build_date}.x86_64.rpm"
            }
            // To S3
            withDockerContainer(args: "-u root -v /var/run/docker.sock:/var/run/docker.sock", image: "docker-dime.di2e.net/docker/backend:maven-3.3.9-jdk-8") {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'MEME_S3_CREDS',
                            usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh "aws configure set default.s3.signature_version s3v4"
                    sh "aws s3 cp ./${serviceName}-${serviceVersion}-${version_full}-${BUILD_NUMBER}.${build_date}.x86_64.rpm s3://meme-yum-repo/"
                    if (git_tag.length() > 0) {
                        sh "aws s3 cp ./${serviceName}-${serviceVersion}-${version_full}-${BUILD_NUMBER}.${build_date}.x86_64.rpm s3://builds.363-283.io/"
                    }
                }
            }
        }, tar: {
            // setup folder to act as root
            sh "rm -rf ${tarroot}"
            sh "mkdir -p ${tarroot}/bin && mkdir -p ${tarroot}/etc && mkdir -p ${tarroot}/log"
            // bin - binaries and executables
            sh "cp ${projectpath}/cmd/odrive/odrive ${tarroot}/bin/odrive"
            sh "cp ${projectpath}/cmd/odrive-database/odrive-database ${tarroot}/bin/database"
            sh "cp ${projectpath}/cmd/obfuscate/obfuscate ${tarroot}/bin/obfuscate"
            // etc - configuration (includes static images, documentation, etc)
            sh "cp ${projectpath}/cmd/odrive/odrive.yml ${tarroot}/etc/${serviceName}.yml"
            sh "mkdir -p ${tarroot}/etc/server/static/css && mkdir -p ${tarroot}/etc/server/static/images && mkdir -p ${tarroot}/etc/server/static/js && mkdir -p ${tarroot}/etc/server/static/templates"
            sh "cp ${projectpath}/server/static/client.go ${tarroot}/etc/server/static/client.go"
            sh "cp ${projectpath}/server/static/css/source_code_pro.css ${tarroot}/etc/server/static/css/source_code_pro.css"
            sh "cp ${projectpath}/server/static/favicon.ico ${tarroot}/etc/server/static/favicon.ico"
            sh "cp ${projectpath}/server/static/${serviceName}-internal.pdf ${tarroot}/etc/server/static/${serviceName}-internal.pdf"
            sh "cp ${projectpath}/server/static/${serviceName}-sag.pdf ${tarroot}/etc/server/static/${serviceName}-sag.pdf"
            sh "cp ${projectpath}/server/static/${serviceName}-sipg.pdf ${tarroot}/etc/server/static/${serviceName}-sipg.pdf"
            sh "cp ${projectpath}/server/static/images/odrive-service.png ${tarroot}/etc/server/static/images/odrive-service.png"
            sh "cp ${projectpath}/server/static/js/getObjectStream.png ${tarroot}/etc/server/static/images/getObjectStream.png"
            sh "cp ${projectpath}/server/static/js/etag.png ${tarroot}/etc/server/static/js/etag.png"
            sh "cp ${projectpath}/server/static/templates/APISample.html ${tarroot}/etc/server/static/templates/APISample.html"
            sh "cp ${projectpath}/server/static/templates/ObjectDriveSDK.java ${tarroot}/etc/server/static/templates/ObjectDriveSDK.java"
            sh "cp ${projectpath}/server/static/templates/boringcrypto.html ${tarroot}/etc/server/static/templates/boringcrypto.html"
            sh "cp ${projectpath}/server/static/templates/changelog.html ${tarroot}/etc/server/static/templates/changelog.html"
            sh "cp ${projectpath}/server/static/templates/environment.html ${tarroot}/etc/server/static/templates/environment.html"
            sh "cp ${projectpath}/server/static/templates/events.html ${tarroot}/etc/server/static/templates/events.html"
            sh "cp ${projectpath}/server/static/templates/home.html ${tarroot}/etc/server/static/templates/home.html"
            sh "cp ${projectpath}/server/static/templates/rest.html ${tarroot}/etc/server/static/templates/rest.html"
            // tar it up
            tarFilename = "${serviceName}-${serviceVersion}.tgz"
            projectTarFile = "${WORKSPACE}/${tarFilename}"
            sh "cd ${projectpath} && tar -cvzf ${tarFilename} -C ${tarroot} etc bin log && mv ${tarFilename} ${projectTarFile}"
            archiveArtifacts artifacts: '*.tgz'
            // deploy it
            //service.buildAndDeploy(serviceName, serviceVersion, version_patch, saltEnvs, projectTarFile)
        }
    }
}