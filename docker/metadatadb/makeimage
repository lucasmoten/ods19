#!/usr/bin/env python
# This script has been updated to work with python 2.7 and python 3.6

import glob
import os
import sys
import shutil
import subprocess
import imp

from glob import glob

this_script = os.path.abspath(os.path.split(__file__)[1])
# Split absolute path; address `object-drive` w/ negative index.
PROJECT_ROOT = os.sep.join(this_script.split(os.sep)[:-3])
source_file = os.path.join(PROJECT_ROOT, "odb")


def run_dockerfile(dockerfile, image, tag="latest"):
    """
    Runs the docker build.
    Args:
        dockerfile: absolute path to Dockerfile
        image: Image name
        tag: Image tag. Defaults to "latest".
    """
    name_with_tag = image + ":" + tag
    try:
        build_dir = os.path.split(dockerfile)[0]
        subprocess.check_call(
                ['docker', 'build', '--no-cache', '-t', name_with_tag, build_dir],
                stdout=sys.stdout, stderr=sys.stderr)
    except subprocess.CalledProcessError:
        raise


if __name__ == '__main__':

    # Check if GOPATH is set.
    gopath = os.getenv("GOPATH")
    if gopath is None:
        print('GOPATH is not set.')
        sys.exit(1)

    # Locate object-drive-server project
    object_drive_server = os.path.join(gopath, 'src', 'bitbucket.di2e.net', 'dime', 'object-drive-server')
    defaultcerts = os.path.join(object_drive_server, 'defaultcerts')
    odrive_database = os.path.join(object_drive_server, 'cmd', 'odrive-database')
    metadatadb_dir = os.path.join(PROJECT_ROOT, 'docker', 'metadatadb')
    build_dir = os.path.join(metadatadb_dir, 'build')
    dockerfile = os.path.abspath("./Dockerfile")

    if os.path.exists(build_dir):
        shutil.rmtree(build_dir)
    os.mkdir(build_dir)

    # CROSS COMPILATION WOO HOO!
    os.chdir(odrive_database)
    os.putenv('GOOS', 'linux')
    os.putenv('GOARCH', 'amd64')
    if os.getenv('CGO_ENABLED') == None:
        os.putenv('CGO_ENABLED', '0')
    try:
        subprocess.check_call(["go-bindata", "schema", "migrations", "../../defaultcerts/client-mysql/id", "../../defaultcerts/client-mysql/trust"]) 
        subprocess.check_call(["go", "build"]) 
    except Exception as e:
        print(e)
        raise

    # Copy the binary
    binary = os.path.join(odrive_database, 'odrive-database')
    os.chdir(metadatadb_dir)
    shutil.copy(binary, build_dir)

    # Copy in certificates
    # ca.pem
    ca_pem = os.path.join(defaultcerts, 'client-mysql', 'trust', 'ca.pem')
    shutil.copy(ca_pem, build_dir)
    # client-cert.pem
    client_cert_pem = os.path.join(defaultcerts, 'client-mysql', 'id', 'client-cert.pem')
    shutil.copy(client_cert_pem, build_dir)
    # client-key.pem
    client_key_pem = os.path.join(defaultcerts, 'client-mysql', 'id', 'client-key.pem')
    shutil.copy(client_key_pem, build_dir)
    # server-cert.pem
    server_cert_pem = os.path.join(defaultcerts, 'metadatadb', 'id', 'server-cert.pem')
    shutil.copy(server_cert_pem, build_dir)
    # server-key.pem
    server_key_pem = os.path.join(defaultcerts, 'metadatadb', 'id', 'server-key.pem')
    shutil.copy(server_key_pem, build_dir)

    # copy DI2E MITM Proxy certificates if running as jenkins
    # https://confluence.di2e.net/display/DI2E/DI2E+Proxy+Server+Certificates
    if os.environ['USER'] == 'jenkins':
        proxycert_dir = os.path.join(PROJECT_ROOT, 'defaultcerts', 'di2e-mitm-proxy', '*.crt')
        for file in glob(proxycert_dir):
            shutil.copy(file, build_dir)

    # invoke docker build, and always try to clean up directory
    try:
        run_dockerfile(dockerfile, "deciphernow/metadatadb")
    except:
        raise
    shutil.rmtree(build_dir)
 
