#!/usr/bin/env python
import os
import sys
import shutil
import subprocess
import imp

from glob import glob

# Split absolute path; address `object-drive` w/ negative index.
PROJECT_ROOT = os.path.join(os.getenv("GOPATH"), "src", "bitbucket.di2e.net", "dime", "object-drive-server")
source_file = os.path.join(PROJECT_ROOT, "odb")

def odrivebc_build():
    odrivebc_dir = os.path.join(PROJECT_ROOT, 'docker', 'odrivebc')
    build_dir = os.path.join(odrivebc_dir, 'build')
    if os.path.exists(build_dir):
        shutil.rmtree(build_dir)
    dockerfile = os.path.join(odrivebc_dir, "Dockerfile")

    # Run `govendor sync` and copy source tree locally.
    os.chdir(PROJECT_ROOT)
    subprocess.check_call(['./makedocs'])
    subprocess.check_call(['govendor', 'sync'])
    go_packages = [pkg for pkg in filter(os.path.isdir, glob("*"))]

    # get list of dirs with 'docker' ignored    
    to_copy = []
    for pkg in go_packages:
        if pkg not in ['docker']:
            to_copy.append(pkg)
    # loop through that list and copy to build directory
    for pkg in to_copy:
        shutil.copytree(pkg, os.path.join(build_dir, pkg))
    
    dockerfile = os.path.join(odrivebc_dir, "Dockerfile")
    os.chdir(odrivebc_dir)

    # Prepare ldflags for go build inside docker
    #  e.g. 'go_build_ldflags=-X main.Build=2 -X main.Commit=3 -X main.Version=4'
    arg_ldflags = 'go_build_ldflags=-X main.Build=' + get_buildnumber() + ' -X main.Commit=' + get_commitid() + ' -X main.Version=' + get_version()

    # Invoke the Dockerfile.
    #run_dockerfile(dockerfile, "deciphernow/odrive")
    # Clean up build directory.
    subprocess.check_call(
                ['docker', 'build', '--build-arg', arg_ldflags, '-t', 'deciphernow/odrive-bc', odrivebc_dir],
                stdout=sys.stdout, stderr=sys.stderr)
    shutil.rmtree(build_dir)

#-------------------------------------------------------------------------------

def get_version():
    if len(os.environ.get('VERSION_DISPLAY','')) > 0:
        return os.environ.get('VERSION_DISPLAY','')
    changelogverline = subprocess.check_output(['grep', '-m', '1', '## Release', '../../changelog.md'])
    return changelogverline.split()[2] + "b4"

#-------------------------------------------------------------------------------

def get_buildnumber():
    if len(os.environ.get('BUILD_NUMBER','')) > 0:
        return os.environ.get('BUILD_NUMBER','')
    buildnumber = subprocess.check_output(['cat', '../../BUILDNUMBER']).strip()
    return buildnumber

#-------------------------------------------------------------------------------

def get_commitid():
    if len(os.environ.get('CIRCLE_SHA1','')) > 0:
        return os.environ.get('CIRCLE_SHA1','')
    envcommit = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).strip()
    return envcommit

if __name__ == '__main__':
    odrivebc_build()



