#!/bin/bash

# Conventions:
#  - Set environment variables outside of subshells - the parenthesis
#  - Use cd inside of subshells - so that when there are failures, you are still in right directory
#  - Replace standard sed delimiter with `@` when modifying filepaths, e.g. `/opt/cte/...`


edit_cloudshare_redis_properties()
{
  (
    cd etc
    thefile=cloudshare-redis.properties
    sed -i.bak '/redis\.host/ s/=.*/=localhost/ ' $thefile
    sed -i.bak '/redis\.password/ s/=.*/=/ ' $thefile
  )
}

# We are in FS_HOME/opt/cte/cte-aac-service-server-1.0.0-SNAPSHOT
# The launcher as created has the wrong username.  Fix to match what is expected.
edit_launcher()
{
  (
    cd bin
    thefile=cte-aac-service-server
#    sed -i.bak 's/RUN_AS_USER\=\(cte\(aac\)*\|cte\)/RUN_AS_USER\=cteaac/  ' $thefile
#    sed -i.bak 's/RUN_AS_USER\=cte/RUN_AS_USER\=cteaac/  ' $thefile
    chmod 766 $thefile
  )
}

# We are in FS_HOME/opt/cte/cte-aac-service-server-1.0.0-SNAPSHOT
# Put in symbolic names for zookeeper hosts, as they will be passed in actual IP addrs on launch
edit_parameters_config()
{
  (
    cd etc
    thefile=parameters.config
    # Delete the zookeeperConnection line, and replace it with a connection that references localhost
    sed -i.bak '/zookeeperConnection/ d ' $thefile
    echo " \n " >> $thefile
    echo '-gov.ic.cte.server.config.zk.zookeeperConnection=zk:2181' >> $thefile
    echo '-gov.ic.cte.server.config.ipAddress.enableIpAddressResolution=true' >> $thefile
    echo '-gov.ic.cte.server.config.ipAddress.useNetworkInterfaceName=eth0' >> $thefile
    sed -i.bak '/whitelist/ s@.*@-acl.whitelist.file=/opt/cte/cte-aac-service-server-1.0.0/etc/aac-proxying-server-whitelist.txt@' $thefile
    sed -i.bak '/config\.thrift\.port/ s/9091/9093/' $thefile
    sed -i.bak '/announcementPoint/ s/2\.2/1\.0/' $thefile
    chmod 766 $thefile
  )
  (
    cd etc
    sed -i.bak 's/info/debug/' logback.xml
  )
}

# The security-service.properties file has /opt/bedrock paths configured. We need to replace
# these with /opt/cte
edit_security_service_properties()
{
  (
    cd etc
    thefile=security-service.properties
    sed -i.bak 's@/opt/bedrock@/opt/cte@g' $thefile
    sed -i.bak 's/redis\.host=.*/redis.host=localhost/g' $thefile
    sed -i.bak 's/redis\.password=password/redis.password=/g' $thefile
    sed -i.bak '/attribute\.service\.endpoint/ s@=.*@=https://dias/ws/services/DIASMessageReceiverService@' $thefile
    sed -i.bak 's/user\.security\.attributes\.cache\.ttl\.sec=.*/#user.security.attributes.cache.ttl.sec=86400/g' $thefile
    #sed -i.bak '/^token\.type\.mapping/  s/3_0/2_2/g' $thefile
    # Delete references to "audit" since they are not present in Garth's file
    sed -i.bak '/^audit/ d ' $thefile
    chmod 766 $thefile
  )
}

# The file aac-proxying-server-whitelist.txt may have custom entries.
edit_whitelist_file()
{
  (
    cd etc
    thefile=aac-proxying-server-whitelist.txt
    echo "" >> $thefile
    echo "CN=twl-server-generic2, OU=DAE, OU=DIA, OU=twl-server-generic2, O=U.S. Government, C=US" >> $thefile
    echo "" >> $thefile
    echo "CN=test tester01, OU=People, OU=DAE, OU=chimera, O=U.S. Government, C=US" >> $thefile
    chmod 766 $thefile
  )
}

# The Tanuki wrapper.conf also requires a modification of path parameters inside of it
# Specifically, it needs to be aware of the /etc config directory, which exists at the same
# level as /logs, /bin, and /lib.
edit_wrapper_conf()
{
  (
    cd etc
    thefile=wrapper.conf
    sed -i.bak 's@/opt/cte/cte-aac-service-server@/opt/cte/cte-aac-service-server-1.0.0@g' $thefile 
    sed -i.bak '/^wrapper\.logfile\.loglevel/ s/INFO/DEBUG/' $thefile
    chmod 766 $thefile
  )
}


#We are in FS_HOME/opt/cte/cte-aac-service-server-1.0.0-SNAPSHOT
copy_libs()
{
  (
    cd lib
    cp $AAC_BUILD_HOME/resources/token.jar .
  )
}

# Same level as dockerfile
unpack_build()
{
  mkdir -p build
  BUILD_HOME=`pwd`/build
  mkdir -p build/fs
  FS_HOME=`pwd`/build/fs
  (
    cd $FS_HOME
    cp -R ../../resources/fs/* .
    mkdir -p opt/cte
    (
      cd opt/cte
      tar zxf $AAC_HOME/server/target/*.tgz
      cd cte-aac-service-server-1.0.0-SNAPSHOT
      edit_launcher
      edit_parameters_config
      edit_security_service_properties     
      edit_whitelist_file
      edit_cloudshare_redis_properties     
      edit_wrapper_conf
      copy_libs
    )
    # pack the files we are editing just outside of the virtual root dir
    tar cf ../aac-fs.tgz .
  )
}

# Invoke ./makeimage from the same level as Dockerfile
(
  #Find the build of AAC that we are packaging (one that we may be editing and recompiling)
  AAC_BUILD_HOME=$(pwd)
  AAC_HOME=$(cd $OD_ROOT/cte-security-service; pwd)
  if [ -d $AAC_HOME ]
  then
    unpack_build
    #Splitting the dockerfile so that we can get in and debug broken stuff
    docker build -t deciphernow/aac:latest .
  else
    echo $AAC_HOME doesnt exist
  fi
)

