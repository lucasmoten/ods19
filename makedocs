#!/usr/bin/env python

import datetime
import getpass
import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile

#-------------------------------------------------------------------------------

def strip_external_styles(filename, outname=None):
    """ Strip out references to external styles in html files.
    
    Parameters
    ----------
    filename : str
        Fullname of the file to strip from.
    outname : bool, opt
        Outname to write to.  If not supplied, will write in-place.
    """
    
    ext_links = ['(<link.*?http.+?>)', 
                 '(@import url\(.*?http.+?\);)']

    with open(filename, 'r') as handle:
        body = handle.read()
         
    for pattern in ext_links:
        regex = re.compile(pattern)
        body = regex.sub('', body)
            
    with open(filename, 'w') as handle:
        handle.write(body)

#-------------------------------------------------------------------------------

def force_access(filename):
    """ Copies file to temp location, deletes original, then restores
    
    This function takes advantage of unix filesystem rules to change ownership
    of a file.  Though moving a file will keep the creator's permissions, 
    performaing a copy will update the ownership to the user that issues the 
    command.  
    
    Parameters
    ----------
    filename : str
        Full path to the file to be forced under current user ownership
    
    """
    
    _, temp_name = tempfile.mkstemp()
    
    shutil.copy(filename, temp_name)
    os.remove(filename)
    shutil.copy(temp_name, filename)

#-------------------------------------------------------------------------------

def get_version():
    changelogverline = subprocess.check_output(['grep', '-m', '1', '## Release', 'changelog.md'])
    goversion = subprocess.check_output(['go','version'])
    if "b4" in goversion.split()[2]:
        return changelogverline.split()[2] + "b4"
    return changelogverline.split()[2]

#-------------------------------------------------------------------------------

def get_buildnumber():
    buildnumber = subprocess.check_output(['cat', 'BUILDNUMBER']).strip()
    return buildnumber


#-------------------------------------------------------------------------------

def inject_replacements(filename, changelogver, buildnumber, outname=None):
    """ Strip out references to external styles in html files.
    
    Parameters
    ----------
    filename : str
        Fullname of the file to strip from.
    outname : bool, opt
        Outname to write to.  If not supplied, will write in-place.
    """
    
    subprocess.check_call(['sed', '-i', 's/{0}/{1}/ '.format(re.escape('--Version--'),changelogver), filename])
    subprocess.check_call(['sed', '-i', 's/{0}/{1}/ '.format(re.escape('--BuildNumber--'),buildnumber), filename])
    subprocess.check_call(['sed', '-i', 's/{0}/{1}/ '.format(re.escape('--BuildDate--'),datetime.datetime.today().strftime('%Y-%m-%d')), filename])

#-------------------------------------------------------------------------------

dockercmd = 'cat %s | docker run --rm -i deciphernow/aglio:2.3.0 sh -c "cat > f.md ; /usr/local/bin/aglio -i f.md -o f.html &> /dev/null; cat f.html" > %s'
if __name__ == "__main__":
    convert_cmds = [dockercmd % ("docs/home.md","docs/home.html"),
                    dockercmd % ("docs/rest.md","docs/rest.html"),
                    dockercmd % ("docs/environment.md", "docs/environment.html"),
                    dockercmd % ("changelog.md", "docs/changelog.html"),
                    dockercmd % ("docs/events.md", "docs/events.html")]

    for cmd in convert_cmds:
        print(cmd)
        try:
            os.system(cmd)
        except Exception as e:
            print e
            exit(1)

    final_dir = 'server/static/templates'
    if not os.path.exists(final_dir):
        print("must copy %s" % (final_dir))
        os.makedirs(final_dir)

    changelogver = get_version()     
    buildnumber = get_buildnumber()   
    initial_dir = os.getcwd()
    os.chdir('docs')
    shutil.copy('home.html',os.path.join('..','server', 'home.html'))    
    shutil.copy('home.html',os.path.join('..','server', 'root.html'))    
    for item in glob.glob('*.html'):
        print("must copy %s" % (item))
        #--Assert files are editable by current user.  Needed to resolve issues
        #--with Circle-CI
        if not os.access(item, os.W_OK):
            force_access(item)
        strip_external_styles(item)
        inject_replacements(item, changelogver, buildnumber)
        shutil.move(item, os.path.join('..',final_dir, item))    
    command = ["./builddiagrams"]
    if len(sys.argv) > 1:
        command.extend(sys.argv[1:])
    subprocess.check_call(command)
    os.chdir(initial_dir)
    
